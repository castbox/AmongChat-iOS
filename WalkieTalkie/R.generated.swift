//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 6 files.
  struct file {
    /// Resource file `DefaultRemoteConfig.plist`.
    static let defaultRemoteConfigPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "DefaultRemoteConfig", pathExtension: "plist")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `call.m4a`.
    static let callM4a = Rswift.FileResource(bundle: R.hostingBundle, name: "call", pathExtension: "m4a")
    /// Resource file `cbegin.mp3`.
    static let cbeginMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "cbegin", pathExtension: "mp3")
    /// Resource file `emojis.json`.
    static let emojisJson = Rswift.FileResource(bundle: R.hostingBundle, name: "emojis", pathExtension: "json")
    /// Resource file `end.mp3`.
    static let endMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "end", pathExtension: "mp3")
    
    /// `bundle.url(forResource: "DefaultRemoteConfig", withExtension: "plist")`
    static func defaultRemoteConfigPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.defaultRemoteConfigPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "call", withExtension: "m4a")`
    static func callM4a(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.callM4a
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "cbegin", withExtension: "mp3")`
    static func cbeginMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cbeginMp3
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "emojis", withExtension: "json")`
    static func emojisJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.emojisJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "end", withExtension: "mp3")`
    static func endMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.endMp3
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 7 fonts.
  struct font: Rswift.Validatable {
    /// Font `BlackOpsOne-Regular`.
    static let blackOpsOneRegular = Rswift.FontResource(fontName: "BlackOpsOne-Regular")
    /// Font `Nunito-Black`.
    static let nunitoBlack = Rswift.FontResource(fontName: "Nunito-Black")
    /// Font `Nunito-BoldItalic`.
    static let nunitoBoldItalic = Rswift.FontResource(fontName: "Nunito-BoldItalic")
    /// Font `Nunito-Bold`.
    static let nunitoBold = Rswift.FontResource(fontName: "Nunito-Bold")
    /// Font `Nunito-ExtraBold`.
    static let nunitoExtraBold = Rswift.FontResource(fontName: "Nunito-ExtraBold")
    /// Font `Nunito-Regular`.
    static let nunitoRegular = Rswift.FontResource(fontName: "Nunito-Regular")
    /// Font `Nunito-SemiBold`.
    static let nunitoSemiBold = Rswift.FontResource(fontName: "Nunito-SemiBold")
    
    /// `UIFont(name: "BlackOpsOne-Regular", size: ...)`
    static func blackOpsOneRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: blackOpsOneRegular, size: size)
    }
    
    /// `UIFont(name: "Nunito-Black", size: ...)`
    static func nunitoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoBlack, size: size)
    }
    
    /// `UIFont(name: "Nunito-Bold", size: ...)`
    static func nunitoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoBold, size: size)
    }
    
    /// `UIFont(name: "Nunito-BoldItalic", size: ...)`
    static func nunitoBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoBoldItalic, size: size)
    }
    
    /// `UIFont(name: "Nunito-ExtraBold", size: ...)`
    static func nunitoExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoExtraBold, size: size)
    }
    
    /// `UIFont(name: "Nunito-Regular", size: ...)`
    static func nunitoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoRegular, size: size)
    }
    
    /// `UIFont(name: "Nunito-SemiBold", size: ...)`
    static func nunitoSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoSemiBold, size: size)
    }
    
    static func validate() throws {
      if R.font.blackOpsOneRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BlackOpsOne-Regular' could not be loaded, is 'BlackOpsOne-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-Black' could not be loaded, is 'Nunito-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-Bold' could not be loaded, is 'Nunito-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-BoldItalic' could not be loaded, is 'Nunito-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-ExtraBold' could not be loaded, is 'Nunito-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-Regular' could not be loaded, is 'Nunito-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-SemiBold' could not be loaded, is 'Nunito-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 129 images.
  struct image {
    /// Image `ac_animation_background`.
    static let ac_animation_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_animation_background")
    /// Image `ac_back`.
    static let ac_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_back")
    /// Image `ac_home_banner`.
    static let ac_home_banner = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_home_banner")
    /// Image `ac_home_create`.
    static let ac_home_create = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_home_create")
    /// Image `ac_home_profile`.
    static let ac_home_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_home_profile")
    /// Image `ac_icon_kick_user`.
    static let ac_icon_kick_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_kick_user")
    /// Image `ac_icon_leave`.
    static let ac_icon_leave = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_leave")
    /// Image `ac_icon_mic_off`.
    static let ac_icon_mic_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_mic_off")
    /// Image `ac_icon_mic_on`.
    static let ac_icon_mic_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_mic_on")
    /// Image `ac_icon_minmize`.
    static let ac_icon_minmize = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_minmize")
    /// Image `ac_icon_not`.
    static let ac_icon_not = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_not")
    /// Image `ac_icon_room_disable_mic`.
    static let ac_icon_room_disable_mic = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_room_disable_mic")
    /// Image `ac_icon_room_report`.
    static let ac_icon_room_report = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_room_report")
    /// Image `ac_icon_seat_add`.
    static let ac_icon_seat_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_seat_add")
    /// Image `ac_icon_send_message`.
    static let ac_icon_send_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_send_message")
    /// Image `ac_icon_share`.
    static let ac_icon_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_share")
    /// Image `ac_icon_sheet_block`.
    static let ac_icon_sheet_block = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_sheet_block")
    /// Image `ac_icon_sheet_mute`.
    static let ac_icon_sheet_mute = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_sheet_mute")
    /// Image `ac_icon_sheet_unblock`.
    static let ac_icon_sheet_unblock = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_sheet_unblock")
    /// Image `ac_icon_sheet_unmute`.
    static let ac_icon_sheet_unmute = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_sheet_unmute")
    /// Image `ac_kick_selected`.
    static let ac_kick_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_kick_selected")
    /// Image `ac_medal_bronze`.
    static let ac_medal_bronze = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_medal_bronze")
    /// Image `ac_medal_silver`.
    static let ac_medal_silver = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_medal_silver")
    /// Image `ac_profile_back`.
    static let ac_profile_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_profile_back")
    /// Image `ac_profile_birthday`.
    static let ac_profile_birthday = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_profile_birthday")
    /// Image `ac_profile_bottom_lead`.
    static let ac_profile_bottom_lead = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_profile_bottom_lead")
    /// Image `ac_profile_close`.
    static let ac_profile_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_profile_close")
    /// Image `ac_profile_edit`.
    static let ac_profile_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_profile_edit")
    /// Image `ac_profile_username`.
    static let ac_profile_username = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_profile_username")
    /// Image `ac_rate_us`.
    static let ac_rate_us = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_rate_us")
    /// Image `ac_right_arrow`.
    static let ac_right_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_right_arrow")
    /// Image `ac_share_app`.
    static let ac_share_app = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_share_app")
    /// Image `ac_topic_hot`.
    static let ac_topic_hot = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_topic_hot")
    /// Image `ac_trophy`.
    static let ac_trophy = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_trophy")
    /// Image `backNor`.
    static let backNor = Rswift.ImageResource(bundle: R.hostingBundle, name: "backNor")
    /// Image `btn_add`.
    static let btn_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_add")
    /// Image `btn_call_off`.
    static let btn_call_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_call_off")
    /// Image `btn_call_on`.
    static let btn_call_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_call_on")
    /// Image `btn_down`.
    static let btn_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_down")
    /// Image `btn_more_action`.
    static let btn_more_action = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_more_action")
    /// Image `btn_power_on`.
    static let btn_power_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_power_on")
    /// Image `btn_power`.
    static let btn_power = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_power")
    /// Image `btn_private_icon`.
    static let btn_private_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_private_icon")
    /// Image `btn_private_small`.
    static let btn_private_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_private_small")
    /// Image `btn_room_copy`.
    static let btn_room_copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_room_copy")
    /// Image `btn_room_message`.
    static let btn_room_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_room_message")
    /// Image `btn_room_share`.
    static let btn_room_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_room_share")
    /// Image `btn_share`.
    static let btn_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_share")
    /// Image `btn_up`.
    static let btn_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_up")
    /// Image `channel_user_list_block`.
    static let channel_user_list_block = Rswift.ImageResource(bundle: R.hostingBundle, name: "channel_user_list_block")
    /// Image `channel_user_list_ear`.
    static let channel_user_list_ear = Rswift.ImageResource(bundle: R.hostingBundle, name: "channel_user_list_ear")
    /// Image `channel_user_list_followed`.
    static let channel_user_list_followed = Rswift.ImageResource(bundle: R.hostingBundle, name: "channel_user_list_followed")
    /// Image `channel_user_list_mic`.
    static let channel_user_list_mic = Rswift.ImageResource(bundle: R.hostingBundle, name: "channel_user_list_mic")
    /// Image `channel_user_list_mute`.
    static let channel_user_list_mute = Rswift.ImageResource(bundle: R.hostingBundle, name: "channel_user_list_mute")
    /// Image `channel_user_list_social`.
    static let channel_user_list_social = Rswift.ImageResource(bundle: R.hostingBundle, name: "channel_user_list_social")
    /// Image `default_avatar_0`.
    static let default_avatar_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "default_avatar_0")
    /// Image `default_avatar_1`.
    static let default_avatar_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "default_avatar_1")
    /// Image `default_avatar_2`.
    static let default_avatar_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "default_avatar_2")
    /// Image `default_avatar_3`.
    static let default_avatar_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "default_avatar_3")
    /// Image `default_avatar_4`.
    static let default_avatar_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "default_avatar_4")
    /// Image `default_avatar_5`.
    static let default_avatar_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "default_avatar_5")
    /// Image `home_btn_bg_b`.
    static let home_btn_bg_b = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_btn_bg_b")
    /// Image `home_btn_bg`.
    static let home_btn_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_btn_bg")
    /// Image `home_connect_btn_bg_b`.
    static let home_connect_btn_bg_b = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_connect_btn_bg_b")
    /// Image `home_name_edit`.
    static let home_name_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_name_edit")
    /// Image `iconReport`.
    static let iconReport = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconReport")
    /// Image `icon_close_gray`.
    static let icon_close_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close_gray")
    /// Image `icon_close`.
    static let icon_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close")
    /// Image `icon_emoji_hh`.
    static let icon_emoji_hh = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_emoji_hh")
    /// Image `icon_emoji_kiss`.
    static let icon_emoji_kiss = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_emoji_kiss")
    /// Image `icon_guide_1`.
    static let icon_guide_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guide_1")
    /// Image `icon_guide_2`.
    static let icon_guide_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guide_2")
    /// Image `icon_guide_3`.
    static let icon_guide_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guide_3")
    /// Image `icon_guide_4_b`.
    static let icon_guide_4_b = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guide_4_b")
    /// Image `icon_guide_4`.
    static let icon_guide_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guide_4")
    /// Image `icon_mic_disable`.
    static let icon_mic_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mic_disable")
    /// Image `icon_mic`.
    static let icon_mic = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mic")
    /// Image `icon_pri_ad`.
    static let icon_pri_ad = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pri_ad")
    /// Image `icon_pri_join`.
    static let icon_pri_join = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pri_join")
    /// Image `icon_pro_persons`.
    static let icon_pro_persons = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pro_persons")
    /// Image `icon_pro_select_y`.
    static let icon_pro_select_y = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pro_select_y")
    /// Image `icon_pro_select`.
    static let icon_pro_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pro_select")
    /// Image `icon_pro_y`.
    static let icon_pro_y = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pro_y")
    /// Image `icon_pro`.
    static let icon_pro = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pro")
    /// Image `icon_push`.
    static let icon_push = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_push")
    /// Image `icon_room_lock`.
    static let icon_room_lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_room_lock")
    /// Image `icon_screen_bg_g_d_pdf`.
    static let icon_screen_bg_g_d_pdf = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_screen_bg_g_d_pdf")
    /// Image `icon_screen_bg_g_shadow_round`.
    static let icon_screen_bg_g_shadow_round = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_screen_bg_g_shadow_round")
    /// Image `icon_screen_bg_g_shadow`.
    static let icon_screen_bg_g_shadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_screen_bg_g_shadow")
    /// Image `icon_screen_bg_g`.
    static let icon_screen_bg_g = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_screen_bg_g")
    /// Image `icon_screen_bg_o_d`.
    static let icon_screen_bg_o_d = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_screen_bg_o_d")
    /// Image `icon_screen_bg_o_shadow_round`.
    static let icon_screen_bg_o_shadow_round = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_screen_bg_o_shadow_round")
    /// Image `icon_screen_bg_o_shadow`.
    static let icon_screen_bg_o_shadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_screen_bg_o_shadow")
    /// Image `icon_screen_bg_o`.
    static let icon_screen_bg_o = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_screen_bg_o")
    /// Image `icon_setting_diamonds_u`.
    static let icon_setting_diamonds_u = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting_diamonds_u")
    /// Image `icon_setting_diamonds`.
    static let icon_setting_diamonds = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting_diamonds")
    /// Image `icon_setting_star`.
    static let icon_setting_star = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting_star")
    /// Image `icon_setting`.
    static let icon_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting")
    /// Image `icon_share_bg`.
    static let icon_share_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_bg")
    /// Image `icon_share_message`.
    static let icon_share_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_message")
    /// Image `icon_share_more`.
    static let icon_share_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_more")
    /// Image `icon_share_snapchat`.
    static let icon_share_snapchat = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_snapchat")
    /// Image `icon_share_ticktock`.
    static let icon_share_ticktock = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_ticktock")
    /// Image `icon_share_whatsapp`.
    static let icon_share_whatsapp = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_whatsapp")
    /// Image `icon_user_list_mic_block`.
    static let icon_user_list_mic_block = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_user_list_mic_block")
    /// Image `icon_user_list_mic`.
    static let icon_user_list_mic = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_user_list_mic")
    /// Image `launch_logo`.
    static let launch_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_logo")
    /// Image `launch_name`.
    static let launch_name = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_name")
    /// Image `logo_snapchat`.
    static let logo_snapchat = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_snapchat")
    /// Image `private_share_bg_2`.
    static let private_share_bg_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "private_share_bg_2")
    /// Image `private_share_bg`.
    static let private_share_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "private_share_bg")
    /// Image `profile_avatar_random_btn`.
    static let profile_avatar_random_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_avatar_random_btn")
    /// Image `profile_block_users`.
    static let profile_block_users = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_block_users")
    /// Image `profile_settings`.
    static let profile_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_settings")
    /// Image `public_share_bg_2`.
    static let public_share_bg_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "public_share_bg_2")
    /// Image `public_share_bg`.
    static let public_share_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "public_share_bg")
    /// Image `share_logo`.
    static let share_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_logo")
    /// Image `snapchat_share_bg`.
    static let snapchat_share_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "snapchat_share_bg")
    /// Image `space_ship_bg`.
    static let space_ship_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "space_ship_bg")
    /// Image `speak_button_dis`.
    static let speak_button_dis = Rswift.ImageResource(bundle: R.hostingBundle, name: "speak_button_dis")
    /// Image `speak_button_nor`.
    static let speak_button_nor = Rswift.ImageResource(bundle: R.hostingBundle, name: "speak_button_nor")
    /// Image `speak_button_pre`.
    static let speak_button_pre = Rswift.ImageResource(bundle: R.hostingBundle, name: "speak_button_pre")
    /// Image `speak_list_add`.
    static let speak_list_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "speak_list_add")
    /// Image `speak_list_mic`.
    static let speak_list_mic = Rswift.ImageResource(bundle: R.hostingBundle, name: "speak_list_mic")
    /// Image `speak_list_user`.
    static let speak_list_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "speak_list_user")
    /// Image `star_bg`.
    static let star_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "star_bg")
    /// Image `user_list_friend_dark`.
    static let user_list_friend_dark = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_list_friend_dark")
    /// Image `user_list_friend_light`.
    static let user_list_friend_light = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_list_friend_light")
    /// Image `user_list_invite`.
    static let user_list_invite = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_list_invite")
    
    /// `UIImage(named: "ac_animation_background", bundle: ..., traitCollection: ...)`
    static func ac_animation_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_animation_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_back", bundle: ..., traitCollection: ...)`
    static func ac_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_home_banner", bundle: ..., traitCollection: ...)`
    static func ac_home_banner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_home_banner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_home_create", bundle: ..., traitCollection: ...)`
    static func ac_home_create(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_home_create, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_home_profile", bundle: ..., traitCollection: ...)`
    static func ac_home_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_home_profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_kick_user", bundle: ..., traitCollection: ...)`
    static func ac_icon_kick_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_kick_user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_leave", bundle: ..., traitCollection: ...)`
    static func ac_icon_leave(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_leave, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_mic_off", bundle: ..., traitCollection: ...)`
    static func ac_icon_mic_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_mic_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_mic_on", bundle: ..., traitCollection: ...)`
    static func ac_icon_mic_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_mic_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_minmize", bundle: ..., traitCollection: ...)`
    static func ac_icon_minmize(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_minmize, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_not", bundle: ..., traitCollection: ...)`
    static func ac_icon_not(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_not, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_room_disable_mic", bundle: ..., traitCollection: ...)`
    static func ac_icon_room_disable_mic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_room_disable_mic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_room_report", bundle: ..., traitCollection: ...)`
    static func ac_icon_room_report(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_room_report, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_seat_add", bundle: ..., traitCollection: ...)`
    static func ac_icon_seat_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_seat_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_send_message", bundle: ..., traitCollection: ...)`
    static func ac_icon_send_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_send_message, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_share", bundle: ..., traitCollection: ...)`
    static func ac_icon_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_sheet_block", bundle: ..., traitCollection: ...)`
    static func ac_icon_sheet_block(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_sheet_block, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_sheet_mute", bundle: ..., traitCollection: ...)`
    static func ac_icon_sheet_mute(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_sheet_mute, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_sheet_unblock", bundle: ..., traitCollection: ...)`
    static func ac_icon_sheet_unblock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_sheet_unblock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_sheet_unmute", bundle: ..., traitCollection: ...)`
    static func ac_icon_sheet_unmute(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_sheet_unmute, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_kick_selected", bundle: ..., traitCollection: ...)`
    static func ac_kick_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_kick_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_medal_bronze", bundle: ..., traitCollection: ...)`
    static func ac_medal_bronze(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_medal_bronze, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_medal_silver", bundle: ..., traitCollection: ...)`
    static func ac_medal_silver(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_medal_silver, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_profile_back", bundle: ..., traitCollection: ...)`
    static func ac_profile_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_profile_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_profile_birthday", bundle: ..., traitCollection: ...)`
    static func ac_profile_birthday(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_profile_birthday, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_profile_bottom_lead", bundle: ..., traitCollection: ...)`
    static func ac_profile_bottom_lead(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_profile_bottom_lead, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_profile_close", bundle: ..., traitCollection: ...)`
    static func ac_profile_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_profile_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_profile_edit", bundle: ..., traitCollection: ...)`
    static func ac_profile_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_profile_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_profile_username", bundle: ..., traitCollection: ...)`
    static func ac_profile_username(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_profile_username, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_rate_us", bundle: ..., traitCollection: ...)`
    static func ac_rate_us(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_rate_us, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_right_arrow", bundle: ..., traitCollection: ...)`
    static func ac_right_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_right_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_share_app", bundle: ..., traitCollection: ...)`
    static func ac_share_app(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_share_app, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_topic_hot", bundle: ..., traitCollection: ...)`
    static func ac_topic_hot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_topic_hot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_trophy", bundle: ..., traitCollection: ...)`
    static func ac_trophy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_trophy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backNor", bundle: ..., traitCollection: ...)`
    static func backNor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backNor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_add", bundle: ..., traitCollection: ...)`
    static func btn_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_call_off", bundle: ..., traitCollection: ...)`
    static func btn_call_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_call_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_call_on", bundle: ..., traitCollection: ...)`
    static func btn_call_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_call_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_down", bundle: ..., traitCollection: ...)`
    static func btn_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_more_action", bundle: ..., traitCollection: ...)`
    static func btn_more_action(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_more_action, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_power", bundle: ..., traitCollection: ...)`
    static func btn_power(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_power, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_power_on", bundle: ..., traitCollection: ...)`
    static func btn_power_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_power_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_private_icon", bundle: ..., traitCollection: ...)`
    static func btn_private_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_private_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_private_small", bundle: ..., traitCollection: ...)`
    static func btn_private_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_private_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_room_copy", bundle: ..., traitCollection: ...)`
    static func btn_room_copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_room_copy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_room_message", bundle: ..., traitCollection: ...)`
    static func btn_room_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_room_message, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_room_share", bundle: ..., traitCollection: ...)`
    static func btn_room_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_room_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_share", bundle: ..., traitCollection: ...)`
    static func btn_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_up", bundle: ..., traitCollection: ...)`
    static func btn_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "channel_user_list_block", bundle: ..., traitCollection: ...)`
    static func channel_user_list_block(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.channel_user_list_block, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "channel_user_list_ear", bundle: ..., traitCollection: ...)`
    static func channel_user_list_ear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.channel_user_list_ear, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "channel_user_list_followed", bundle: ..., traitCollection: ...)`
    static func channel_user_list_followed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.channel_user_list_followed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "channel_user_list_mic", bundle: ..., traitCollection: ...)`
    static func channel_user_list_mic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.channel_user_list_mic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "channel_user_list_mute", bundle: ..., traitCollection: ...)`
    static func channel_user_list_mute(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.channel_user_list_mute, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "channel_user_list_social", bundle: ..., traitCollection: ...)`
    static func channel_user_list_social(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.channel_user_list_social, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default_avatar_0", bundle: ..., traitCollection: ...)`
    static func default_avatar_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_avatar_0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default_avatar_1", bundle: ..., traitCollection: ...)`
    static func default_avatar_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_avatar_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default_avatar_2", bundle: ..., traitCollection: ...)`
    static func default_avatar_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_avatar_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default_avatar_3", bundle: ..., traitCollection: ...)`
    static func default_avatar_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_avatar_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default_avatar_4", bundle: ..., traitCollection: ...)`
    static func default_avatar_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_avatar_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default_avatar_5", bundle: ..., traitCollection: ...)`
    static func default_avatar_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_avatar_5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_btn_bg", bundle: ..., traitCollection: ...)`
    static func home_btn_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_btn_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_btn_bg_b", bundle: ..., traitCollection: ...)`
    static func home_btn_bg_b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_btn_bg_b, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_connect_btn_bg_b", bundle: ..., traitCollection: ...)`
    static func home_connect_btn_bg_b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_connect_btn_bg_b, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_name_edit", bundle: ..., traitCollection: ...)`
    static func home_name_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_name_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "iconReport", bundle: ..., traitCollection: ...)`
    static func iconReport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconReport, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_close", bundle: ..., traitCollection: ...)`
    static func icon_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_close_gray", bundle: ..., traitCollection: ...)`
    static func icon_close_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_emoji_hh", bundle: ..., traitCollection: ...)`
    static func icon_emoji_hh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_emoji_hh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_emoji_kiss", bundle: ..., traitCollection: ...)`
    static func icon_emoji_kiss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_emoji_kiss, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_guide_1", bundle: ..., traitCollection: ...)`
    static func icon_guide_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guide_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_guide_2", bundle: ..., traitCollection: ...)`
    static func icon_guide_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guide_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_guide_3", bundle: ..., traitCollection: ...)`
    static func icon_guide_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guide_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_guide_4", bundle: ..., traitCollection: ...)`
    static func icon_guide_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guide_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_guide_4_b", bundle: ..., traitCollection: ...)`
    static func icon_guide_4_b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guide_4_b, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_mic", bundle: ..., traitCollection: ...)`
    static func icon_mic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_mic_disable", bundle: ..., traitCollection: ...)`
    static func icon_mic_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mic_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pri_ad", bundle: ..., traitCollection: ...)`
    static func icon_pri_ad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pri_ad, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pri_join", bundle: ..., traitCollection: ...)`
    static func icon_pri_join(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pri_join, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pro", bundle: ..., traitCollection: ...)`
    static func icon_pro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pro, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pro_persons", bundle: ..., traitCollection: ...)`
    static func icon_pro_persons(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pro_persons, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pro_select", bundle: ..., traitCollection: ...)`
    static func icon_pro_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pro_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pro_select_y", bundle: ..., traitCollection: ...)`
    static func icon_pro_select_y(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pro_select_y, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pro_y", bundle: ..., traitCollection: ...)`
    static func icon_pro_y(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pro_y, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_push", bundle: ..., traitCollection: ...)`
    static func icon_push(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_push, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_room_lock", bundle: ..., traitCollection: ...)`
    static func icon_room_lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_room_lock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_screen_bg_g", bundle: ..., traitCollection: ...)`
    static func icon_screen_bg_g(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_screen_bg_g, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_screen_bg_g_d_pdf", bundle: ..., traitCollection: ...)`
    static func icon_screen_bg_g_d_pdf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_screen_bg_g_d_pdf, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_screen_bg_g_shadow", bundle: ..., traitCollection: ...)`
    static func icon_screen_bg_g_shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_screen_bg_g_shadow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_screen_bg_g_shadow_round", bundle: ..., traitCollection: ...)`
    static func icon_screen_bg_g_shadow_round(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_screen_bg_g_shadow_round, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_screen_bg_o", bundle: ..., traitCollection: ...)`
    static func icon_screen_bg_o(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_screen_bg_o, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_screen_bg_o_d", bundle: ..., traitCollection: ...)`
    static func icon_screen_bg_o_d(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_screen_bg_o_d, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_screen_bg_o_shadow", bundle: ..., traitCollection: ...)`
    static func icon_screen_bg_o_shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_screen_bg_o_shadow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_screen_bg_o_shadow_round", bundle: ..., traitCollection: ...)`
    static func icon_screen_bg_o_shadow_round(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_screen_bg_o_shadow_round, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting", bundle: ..., traitCollection: ...)`
    static func icon_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting_diamonds", bundle: ..., traitCollection: ...)`
    static func icon_setting_diamonds(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting_diamonds, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting_diamonds_u", bundle: ..., traitCollection: ...)`
    static func icon_setting_diamonds_u(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting_diamonds_u, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting_star", bundle: ..., traitCollection: ...)`
    static func icon_setting_star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting_star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_share_bg", bundle: ..., traitCollection: ...)`
    static func icon_share_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_share_message", bundle: ..., traitCollection: ...)`
    static func icon_share_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_message, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_share_more", bundle: ..., traitCollection: ...)`
    static func icon_share_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_share_snapchat", bundle: ..., traitCollection: ...)`
    static func icon_share_snapchat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_snapchat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_share_ticktock", bundle: ..., traitCollection: ...)`
    static func icon_share_ticktock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_ticktock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_share_whatsapp", bundle: ..., traitCollection: ...)`
    static func icon_share_whatsapp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_whatsapp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_user_list_mic", bundle: ..., traitCollection: ...)`
    static func icon_user_list_mic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_user_list_mic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_user_list_mic_block", bundle: ..., traitCollection: ...)`
    static func icon_user_list_mic_block(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_user_list_mic_block, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch_logo", bundle: ..., traitCollection: ...)`
    static func launch_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch_name", bundle: ..., traitCollection: ...)`
    static func launch_name(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_name, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_snapchat", bundle: ..., traitCollection: ...)`
    static func logo_snapchat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_snapchat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "private_share_bg", bundle: ..., traitCollection: ...)`
    static func private_share_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.private_share_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "private_share_bg_2", bundle: ..., traitCollection: ...)`
    static func private_share_bg_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.private_share_bg_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile_avatar_random_btn", bundle: ..., traitCollection: ...)`
    static func profile_avatar_random_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_avatar_random_btn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile_block_users", bundle: ..., traitCollection: ...)`
    static func profile_block_users(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_block_users, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile_settings", bundle: ..., traitCollection: ...)`
    static func profile_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "public_share_bg", bundle: ..., traitCollection: ...)`
    static func public_share_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.public_share_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "public_share_bg_2", bundle: ..., traitCollection: ...)`
    static func public_share_bg_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.public_share_bg_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_logo", bundle: ..., traitCollection: ...)`
    static func share_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "snapchat_share_bg", bundle: ..., traitCollection: ...)`
    static func snapchat_share_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snapchat_share_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "space_ship_bg", bundle: ..., traitCollection: ...)`
    static func space_ship_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.space_ship_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "speak_button_dis", bundle: ..., traitCollection: ...)`
    static func speak_button_dis(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speak_button_dis, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "speak_button_nor", bundle: ..., traitCollection: ...)`
    static func speak_button_nor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speak_button_nor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "speak_button_pre", bundle: ..., traitCollection: ...)`
    static func speak_button_pre(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speak_button_pre, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "speak_list_add", bundle: ..., traitCollection: ...)`
    static func speak_list_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speak_list_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "speak_list_mic", bundle: ..., traitCollection: ...)`
    static func speak_list_mic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speak_list_mic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "speak_list_user", bundle: ..., traitCollection: ...)`
    static func speak_list_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speak_list_user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star_bg", bundle: ..., traitCollection: ...)`
    static func star_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user_list_friend_dark", bundle: ..., traitCollection: ...)`
    static func user_list_friend_dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_list_friend_dark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user_list_friend_light", bundle: ..., traitCollection: ...)`
    static func user_list_friend_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_list_friend_light, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user_list_invite", bundle: ..., traitCollection: ...)`
    static func user_list_invite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_list_invite, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 30 nibs.
  struct nib {
    /// Nib `AmongChatRoomConfigView`.
    static let amongChatRoomConfigView = _R.nib._AmongChatRoomConfigView()
    /// Nib `AmongChatRoomTopBar`.
    static let amongChatRoomTopBar = _R.nib._AmongChatRoomTopBar()
    /// Nib `AmongInputCodeView`.
    static let amongInputCodeView = _R.nib._AmongInputCodeView()
    /// Nib `AmongInputNickNameView`.
    static let amongInputNickNameView = _R.nib._AmongInputNickNameView()
    /// Nib `AmongInputNotesView`.
    static let amongInputNotesView = _R.nib._AmongInputNotesView()
    /// Nib `AmongRoomBottomBar`.
    static let amongRoomBottomBar = _R.nib._AmongRoomBottomBar()
    /// Nib `AmongRoomInfoSetupView`.
    static let amongRoomInfoSetupView = _R.nib._AmongRoomInfoSetupView()
    /// Nib `AmongRoomInfoView`.
    static let amongRoomInfoView = _R.nib._AmongRoomInfoView()
    /// Nib `AmongRoomToolView`.
    static let amongRoomToolView = _R.nib._AmongRoomToolView()
    /// Nib `AmongSheetController`.
    static let amongSheetController = _R.nib._AmongSheetController()
    /// Nib `AmongSheetIconItemCell`.
    static let amongSheetIconItemCell = _R.nib._AmongSheetIconItemCell()
    /// Nib `AmongSheetUserCell`.
    static let amongSheetUserCell = _R.nib._AmongSheetUserCell()
    /// Nib `ChannelUserCell`.
    static let channelUserCell = _R.nib._ChannelUserCell()
    /// Nib `ChannelUserListController`.
    static let channelUserListController = _R.nib._ChannelUserListController()
    /// Nib `CreateGlobalChannelController`.
    static let createGlobalChannelController = _R.nib._CreateGlobalChannelController()
    /// Nib `CreateSecretChannelController`.
    static let createSecretChannelController = _R.nib._CreateSecretChannelController()
    /// Nib `EndUserLicenseController`.
    static let endUserLicenseController = _R.nib._EndUserLicenseController()
    /// Nib `GlobalChannelContainer`.
    static let globalChannelContainer = _R.nib._GlobalChannelContainer()
    /// Nib `GuideFirstView`.
    static let guideFirstView = _R.nib._GuideFirstView()
    /// Nib `GuideFourthView_b`.
    static let guideFourthView_b = _R.nib._GuideFourthView_b()
    /// Nib `GuideFourthView`.
    static let guideFourthView = _R.nib._GuideFourthView()
    /// Nib `GuideSecondView`.
    static let guideSecondView = _R.nib._GuideSecondView()
    /// Nib `GuideThirdView`.
    static let guideThirdView = _R.nib._GuideThirdView()
    /// Nib `JustChillingInfoView`.
    static let justChillingInfoView = _R.nib._JustChillingInfoView()
    /// Nib `PremiumContainer`.
    static let premiumContainer = _R.nib._PremiumContainer()
    /// Nib `ScreenContainer`.
    static let screenContainer = _R.nib._ScreenContainer()
    /// Nib `SecretChannelContainer`.
    static let secretChannelContainer = _R.nib._SecretChannelContainer()
    /// Nib `ShareContainerView`.
    static let shareContainerView = _R.nib._ShareContainerView()
    /// Nib `SnapChatCreativeShareView`.
    static let snapChatCreativeShareView = _R.nib._SnapChatCreativeShareView()
    /// Nib `TikTokShareView`.
    static let tikTokShareView = _R.nib._TikTokShareView()
    
    /// `UINib(name: "AmongChatRoomConfigView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongChatRoomConfigView) instead")
    static func amongChatRoomConfigView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongChatRoomConfigView)
    }
    
    /// `UINib(name: "AmongChatRoomTopBar", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongChatRoomTopBar) instead")
    static func amongChatRoomTopBar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongChatRoomTopBar)
    }
    
    /// `UINib(name: "AmongInputCodeView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongInputCodeView) instead")
    static func amongInputCodeView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongInputCodeView)
    }
    
    /// `UINib(name: "AmongInputNickNameView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongInputNickNameView) instead")
    static func amongInputNickNameView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongInputNickNameView)
    }
    
    /// `UINib(name: "AmongInputNotesView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongInputNotesView) instead")
    static func amongInputNotesView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongInputNotesView)
    }
    
    /// `UINib(name: "AmongRoomBottomBar", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongRoomBottomBar) instead")
    static func amongRoomBottomBar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongRoomBottomBar)
    }
    
    /// `UINib(name: "AmongRoomInfoSetupView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongRoomInfoSetupView) instead")
    static func amongRoomInfoSetupView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongRoomInfoSetupView)
    }
    
    /// `UINib(name: "AmongRoomInfoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongRoomInfoView) instead")
    static func amongRoomInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongRoomInfoView)
    }
    
    /// `UINib(name: "AmongRoomToolView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongRoomToolView) instead")
    static func amongRoomToolView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongRoomToolView)
    }
    
    /// `UINib(name: "AmongSheetController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongSheetController) instead")
    static func amongSheetController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongSheetController)
    }
    
    /// `UINib(name: "AmongSheetIconItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongSheetIconItemCell) instead")
    static func amongSheetIconItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongSheetIconItemCell)
    }
    
    /// `UINib(name: "AmongSheetUserCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongSheetUserCell) instead")
    static func amongSheetUserCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongSheetUserCell)
    }
    
    /// `UINib(name: "ChannelUserCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.channelUserCell) instead")
    static func channelUserCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.channelUserCell)
    }
    
    /// `UINib(name: "ChannelUserListController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.channelUserListController) instead")
    static func channelUserListController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.channelUserListController)
    }
    
    /// `UINib(name: "CreateGlobalChannelController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.createGlobalChannelController) instead")
    static func createGlobalChannelController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.createGlobalChannelController)
    }
    
    /// `UINib(name: "CreateSecretChannelController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.createSecretChannelController) instead")
    static func createSecretChannelController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.createSecretChannelController)
    }
    
    /// `UINib(name: "EndUserLicenseController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.endUserLicenseController) instead")
    static func endUserLicenseController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.endUserLicenseController)
    }
    
    /// `UINib(name: "GlobalChannelContainer", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.globalChannelContainer) instead")
    static func globalChannelContainer(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.globalChannelContainer)
    }
    
    /// `UINib(name: "GuideFirstView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideFirstView) instead")
    static func guideFirstView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideFirstView)
    }
    
    /// `UINib(name: "GuideFourthView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideFourthView) instead")
    static func guideFourthView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideFourthView)
    }
    
    /// `UINib(name: "GuideFourthView_b", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideFourthView_b) instead")
    static func guideFourthView_b(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideFourthView_b)
    }
    
    /// `UINib(name: "GuideSecondView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideSecondView) instead")
    static func guideSecondView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideSecondView)
    }
    
    /// `UINib(name: "GuideThirdView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideThirdView) instead")
    static func guideThirdView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideThirdView)
    }
    
    /// `UINib(name: "JustChillingInfoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.justChillingInfoView) instead")
    static func justChillingInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.justChillingInfoView)
    }
    
    /// `UINib(name: "PremiumContainer", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.premiumContainer) instead")
    static func premiumContainer(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.premiumContainer)
    }
    
    /// `UINib(name: "ScreenContainer", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.screenContainer) instead")
    static func screenContainer(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.screenContainer)
    }
    
    /// `UINib(name: "SecretChannelContainer", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.secretChannelContainer) instead")
    static func secretChannelContainer(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.secretChannelContainer)
    }
    
    /// `UINib(name: "ShareContainerView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.shareContainerView) instead")
    static func shareContainerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shareContainerView)
    }
    
    /// `UINib(name: "SnapChatCreativeShareView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.snapChatCreativeShareView) instead")
    static func snapChatCreativeShareView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.snapChatCreativeShareView)
    }
    
    /// `UINib(name: "TikTokShareView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tikTokShareView) instead")
    static func tikTokShareView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tikTokShareView)
    }
    
    static func amongChatRoomConfigView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongChatRoomConfigView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongChatRoomTopBar(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongChatRoomTopBar.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongInputCodeView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongInputCodeView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongInputNickNameView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongInputNickNameView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongInputNotesView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongInputNotesView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongRoomBottomBar(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongRoomBottomBar.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongRoomInfoSetupView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongRoomInfoSetupView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongRoomInfoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongRoomInfoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongRoomToolView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongRoomToolView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongSheetController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongSheetController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongSheetIconItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AmongSheetIconItemCell? {
      return R.nib.amongSheetIconItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AmongSheetIconItemCell
    }
    
    static func amongSheetUserCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AmongSheetUserCell? {
      return R.nib.amongSheetUserCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AmongSheetUserCell
    }
    
    static func channelUserCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChannelUserCell? {
      return R.nib.channelUserCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChannelUserCell
    }
    
    static func channelUserListController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.channelUserListController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func createGlobalChannelController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.createGlobalChannelController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func createSecretChannelController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.createSecretChannelController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func endUserLicenseController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.endUserLicenseController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func globalChannelContainer(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.globalChannelContainer.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func guideFirstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.guideFirstView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func guideFourthView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.guideFourthView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func guideFourthView_b(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.guideFourthView_b.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func guideSecondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.guideSecondView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func guideThirdView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.guideThirdView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func justChillingInfoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.justChillingInfoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func premiumContainer(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.premiumContainer.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func screenContainer(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.screenContainer.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func secretChannelContainer(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.secretChannelContainer.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func shareContainerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.shareContainerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func snapChatCreativeShareView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.snapChatCreativeShareView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func tikTokShareView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.tikTokShareView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AmongSheetIconItemCell`.
    static let amongSheetIconItemCell: Rswift.ReuseIdentifier<AmongSheetIconItemCell> = Rswift.ReuseIdentifier(identifier: "AmongSheetIconItemCell")
    /// Reuse identifier `AmongSheetUserCell`.
    static let amongSheetUserCell: Rswift.ReuseIdentifier<AmongSheetUserCell> = Rswift.ReuseIdentifier(identifier: "AmongSheetUserCell")
    /// Reuse identifier `ChannelUserCell`.
    static let channelUserCell: Rswift.ReuseIdentifier<ChannelUserCell> = Rswift.ReuseIdentifier(identifier: "ChannelUserCell")
    /// Reuse identifier `SearchCell`.
    static let searchCell: Rswift.ReuseIdentifier<SearchCell> = Rswift.ReuseIdentifier(identifier: "SearchCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Guide`.
    static let guide = _R.storyboard.guide()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Guide", bundle: ...)`
    static func guide(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.guide)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 152 localization keys.
    struct localizable {
      /// en translation: %1$@ enters room
      /// 
      /// Locales: en
      static let channelJoinRequestEnterRoomMsg = Rswift.StringResource(key: "channel.join.request.enter.room.msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %1$@ playing
      /// 
      /// Locales: en
      static let amongChatHomeNowplaying = Rswift.StringResource(key: "among.chat.home.nowplaying", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %1$@ refuses your request
      /// 
      /// Locales: en
      static let channelJoinRequestRefusedMsg = Rswift.StringResource(key: "channel.join.request.refused.msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %@ subscription is %@, it automatically renews unless turned off in Accounting Settings at least 24h before current period ends. Payment is charged to your iTunes Account, cancel any time.
      /// 
      /// Locales: en
      static let premiumSubscriptionDetailNormal = Rswift.StringResource(key: "premium.subscription.detail.normal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: 3 days free trial, then %@ / Year
      /// 
      /// Locales: en
      static let premiumTryTitleDes = Rswift.StringResource(key: "premium.try.title.des", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: 3D Free Trials
      /// 
      /// Locales: en
      static let premiumFree3dTrial = Rswift.StringResource(key: "premium.free.3d.trial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Accept
      /// 
      /// Locales: en
      static let channelJoinRequestAccept = Rswift.StringResource(key: "channel.join.request.accept", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: After the free trial, %@ subscription is %@, it automatically renews unless turned off in Accounting Settings at least 24h before current period ends. Payment is charged to your iTunes Account, cancel any time.
      /// 
      /// Locales: en
      static let premiumSubscriptionDetailFree = Rswift.StringResource(key: "premium.subscription.detail.free", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: All Channels
      /// 
      /// Locales: en
      static let amongChatHomeHashTagsMore = Rswift.StringResource(key: "among.chat.home.hash.tags.more", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: AmongUs
      /// 
      /// Locales: en
      static let amongChatHomeTagAmongB = Rswift.StringResource(key: "among.chat.home.tag.among.b", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Are you sure to exit the room?
      /// 
      /// Locales: en
      static let amongChatLeaveRoomTipTitle = Rswift.StringResource(key: "among.chat.leave.room.tip.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Birthday
      /// 
      /// Locales: en
      static let profileEditBirthday = Rswift.StringResource(key: "profile.edit.birthday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Birthday can be edited only one time in seven days.
      /// 
      /// Locales: en
      static let profielEditBirthdayCantTip = Rswift.StringResource(key: "profiel.edit.birthday.cant.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Block
      /// 
      /// Locales: en
      static let alertBlock = Rswift.StringResource(key: "alert.block", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Block Username?
      /// 
      /// Locales: en
      static let channelUserListBlockActionTitle = Rswift.StringResource(key: "channel.user.list.block.action.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Block users
      /// 
      /// Locales: en
      static let profileBlockUser = Rswift.StringResource(key: "profile.block.user", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Break the mic max limit
      /// 
      /// Locales: en
      static let channelSpeakingLimitModalTitle = Rswift.StringResource(key: "channel.speaking.limit.modal.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: CHANNEL NAME
      /// 
      /// Locales: en
      static let inputPasscodeGlobalPlaceholder = Rswift.StringResource(key: "input.passcode.global.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Can this be your image and name in Among Chat?
      /// 
      /// Locales: en
      static let profileInitialTip = Rswift.StringResource(key: "profile.initial.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en
      static let toastCancel = Rswift.StringResource(key: "toast.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Change theme automatically
      /// 
      /// Locales: en
      static let premiumPrivAutomatically = Rswift.StringResource(key: "premium.priv.automatically", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Channel does not exist
      /// 
      /// Locales: en
      static let channelNotExist = Rswift.StringResource(key: "channel.not.exist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Checking
      /// 
      /// Locales: en
      static let channelChecking = Rswift.StringResource(key: "channel.checking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Continue
      /// 
      /// Locales: en
      static let guideContinue = Rswift.StringResource(key: "guide.continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Copied
      /// 
      /// Locales: en
      static let copied = Rswift.StringResource(key: "copied", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create
      /// 
      /// Locales: en
      static let amongChatCreateRoomTitle = Rswift.StringResource(key: "among.chat.create.room.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create %1$@ room
      /// 
      /// Locales: en
      static let amongChatCreateRoomConfirmBtn = Rswift.StringResource(key: "among.chat.create.room.confirm.btn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create Global Channel
      /// 
      /// Locales: en
      static let addChannelGlobalTipsTitle = Rswift.StringResource(key: "add.channel.global.tips.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create a channel visible to everyone and chat with them
      /// 
      /// Locales: en
      static let addChannelGlobalTipsDes = Rswift.StringResource(key: "add.channel.global.tips.des", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create secret channel to chat with your friends
      /// 
      /// Locales: en
      static let addChannelSecretCreateTipsDes = Rswift.StringResource(key: "add.channel.secret.create.tips.des", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: CreatePrivateChannel
      /// 
      /// Locales: en
      static let amongChatHomeTagCreatePrivate = Rswift.StringResource(key: "among.chat.home.tag.create.private", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Don't want to hear someone's voice? You can mute him, then you won't hear his voice in any room
      /// 
      /// Locales: en
      static let channelUserListMuteActionMsg = Rswift.StringResource(key: "channel.user.list.mute.action.msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Download “Among Chat talk to friends” First
      /// 
      /// Locales: en
      static let shareTiktokContentDowload = Rswift.StringResource(key: "share.tiktok.content.dowload", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: ERROR MAX USERS
      /// 
      /// Locales: en
      static let channelUserMaxState = Rswift.StringResource(key: "channel.user.max.state", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Edit
      /// 
      /// Locales: en
      static let profileEdit = Rswift.StringResource(key: "profile.edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: End user License Agreement
      /// 
      /// Locales: en
      static let endUserLicenseTitle = Rswift.StringResource(key: "end.user.license.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Enter the Secret Channel?
      /// 
      /// Locales: en
      static let enterSecretChannelAlertTitle = Rswift.StringResource(key: "enter.secret.channel.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Failed
      /// 
      /// Locales: en
      static let amongChatRoomTipFailed = Rswift.StringResource(key: "among.chat.room.tip.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: FindCrewmates
      /// 
      /// Locales: en
      static let amongChatHomeTagAmongA = Rswift.StringResource(key: "among.chat.home.tag.among.a", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Follow
      /// 
      /// Locales: en
      static let channelUserListFollow = Rswift.StringResource(key: "channel.user.list.follow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Follow Back
      /// 
      /// Locales: en
      static let socialFollowerFollowAction = Rswift.StringResource(key: "social.follower.follow.action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Followed user
      /// 
      /// Locales: en
      static let channelUserListFollowedTitle = Rswift.StringResource(key: "channel.user.list.followed.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Follower
      /// 
      /// Locales: en
      static let profileFollower = Rswift.StringResource(key: "profile.follower", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Following
      /// 
      /// Locales: en
      static let profileFollowing = Rswift.StringResource(key: "profile.following", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Friends
      /// 
      /// Locales: en
      static let socialRelationFriend = Rswift.StringResource(key: "social.relation.friend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: GLOBAL
      /// 
      /// Locales: en
      static let addChannelGlobalTitle = Rswift.StringResource(key: "add.channel.global.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Google
      /// 
      /// Locales: en
      static let loginGoogle = Rswift.StringResource(key: "login.google", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: GroupChat
      /// 
      /// Locales: en
      static let amongChatHomeTagGroup = Rswift.StringResource(key: "among.chat.home.tag.group", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Harassment or repulsive language
      /// 
      /// Locales: en
      static let reportIncorrectHarassment = Rswift.StringResource(key: "report.incorrect.harassment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Host's notes:
      /// 
      /// Locales: en
      static let roomHostsNotes = Rswift.StringResource(key: "room.hosts.notes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Hot topic
      /// 
      /// Locales: en
      static let amongChatCreateRoomTopicTitle = Rswift.StringResource(key: "among.chat.create.room.topic.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: I Know
      /// 
      /// Locales: en
      static let iKnow = Rswift.StringResource(key: "i.know", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: In %1$@
      /// 
      /// Locales: en
      static let socialStatusInSomeroom = Rswift.StringResource(key: "social.status.in.someroom", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Incorrect information
      /// 
      /// Locales: en
      static let reportIncorrectInformation = Rswift.StringResource(key: "report.incorrect.information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Invitation has been sent
      /// 
      /// Locales: en
      static let channelInviteSentTip = Rswift.StringResource(key: "channel.invite.sent.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Invite friends
      /// 
      /// Locales: en
      static let profileInviteFriends = Rswift.StringResource(key: "profile.invite.friends", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: It's time to start the game! Let's pick a lucky guy to open a room in Among Us.
      /// 
      /// Locales: en
      static let amongChatRoomStartGameTip1 = Rswift.StringResource(key: "among.chat.room.start.game.tip1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Join
      /// 
      /// Locales: en
      static let socialJoinAction = Rswift.StringResource(key: "social.join.action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Join Friend’s Channel
      /// 
      /// Locales: en
      static let joinChannelSecretTipsTitle = Rswift.StringResource(key: "join.channel.secret.tips.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Join in %@ talk to me & have fun !!!
      /// 
      /// Locales: en
      static let shareTiktokPublicTitle = Rswift.StringResource(key: "share.tiktok.public.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Join in my SERET CHANNEL %@ talk to me !!!
      /// 
      /// Locales: en
      static let shareTiktokPrivateTitle = Rswift.StringResource(key: "share.tiktok.private.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Join secret channel to chat with your friends
      /// 
      /// Locales: en
      static let addChannelSecretTipsDes = Rswift.StringResource(key: "add.channel.secret.tips.des", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: JoinPrivateChannel
      /// 
      /// Locales: en
      static let amongChatHomeTagJoinPrivate = Rswift.StringResource(key: "among.chat.home.tag.join.private", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Just Chatting
      /// 
      /// Locales: en
      static let roomTagChilling = Rswift.StringResource(key: "room.tag.chilling", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Kick Selected (%@)
      /// 
      /// Locales: en
      static let amongChatRoomKickSelected = Rswift.StringResource(key: "among.chat.room.kick.selected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: LISTEN
      /// 
      /// Locales: en
      static let channelUserListListenTitle = Rswift.StringResource(key: "channel.user.list.listen.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Let's match & chat
      /// 
      /// Locales: en
      static let amomgChatHomeHashTagsTitle = Rswift.StringResource(key: "amomg.chat.home.hash.tags.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: MAX
      /// 
      /// Locales: en
      static let channelUserMax = Rswift.StringResource(key: "channel.user.max", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: MIC OFF
      /// 
      /// Locales: en
      static let amongChatRoomTipMicOff = Rswift.StringResource(key: "among.chat.room.tip.mic.off", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: MIC ON
      /// 
      /// Locales: en
      static let amongChatRoomTipMicOn = Rswift.StringResource(key: "among.chat.room.tip.mic.on", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: More channels coming soon!
      /// 
      /// Locales: en
      static let amongChatAllRoomsMore = Rswift.StringResource(key: "among.chat.all.rooms.more", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mute
      /// 
      /// Locales: en
      static let channelUserListMute = Rswift.StringResource(key: "channel.user.list.mute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mute Now
      /// 
      /// Locales: en
      static let channelUserListMuteAction = Rswift.StringResource(key: "channel.user.list.mute.action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Muted
      /// 
      /// Locales: en
      static let roomUserListMuted = Rswift.StringResource(key: "room.user.list.muted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No ad available, please try again later. 
      /// 
      /// Locales: en
      static let noAdAlert = Rswift.StringResource(key: "no.ad.alert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No purchases were found on your account
      /// 
      /// Locales: en
      static let settingsRestoreFailBody = Rswift.StringResource(key: "settings.restore.fail.body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Nobody listens yet
      /// 
      /// Locales: en
      static let channelUserListListenEmptyText = Rswift.StringResource(key: "channel.user.list.listen.empty.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Nobody speaks yet
      /// 
      /// Locales: en
      static let channelUserListSpeakEmptyText = Rswift.StringResource(key: "channel.user.list.speak.empty.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en
      static let toastConfirm = Rswift.StringResource(key: "toast.confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Offline
      /// 
      /// Locales: en
      static let socialStatusOffline = Rswift.StringResource(key: "social.status.offline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ok
      /// 
      /// Locales: en
      static let alertOk = Rswift.StringResource(key: "alert.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Online
      /// 
      /// Locales: en
      static let socialStatusOnline = Rswift.StringResource(key: "social.status.online", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Open Game
      /// 
      /// Locales: en
      static let roomTagOpenGame = Rswift.StringResource(key: "room.tag.open.game", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: PASSCODE
      /// 
      /// Locales: en
      static let inputPasscodePlaceholder = Rswift.StringResource(key: "input.passcode.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: PRO
      /// 
      /// Locales: en
      static let channelUserListProBadge = Rswift.StringResource(key: "channel.user.list.pro.badge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Passcode does not exist
      /// 
      /// Locales: en
      static let privateErrorCode = Rswift.StringResource(key: "private.error.code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Pay once, No Subscription
      /// 
      /// Locales: en
      static let premiumSubscriptionDetailLifetime = Rswift.StringResource(key: "premium.subscription.detail.lifetime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please update to the newest version of the app to continue playing.
      /// 
      /// Locales: en
      static let forceUpgradeTip = Rswift.StringResource(key: "force.upgrade.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Privacy Policy
      /// 
      /// Locales: en
      static let termsPrivacy = Rswift.StringResource(key: "terms.privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Privacy Policy & Terms of Service
      /// 
      /// Locales: en
      static let privacyLabel = Rswift.StringResource(key: "privacy.label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Private
      /// 
      /// Locales: en
      static let amongChatCreateRoomPrivate = Rswift.StringResource(key: "among.chat.create.room.private", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Private
      /// 
      /// Locales: en
      static let roomPrivate = Rswift.StringResource(key: "room.private", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Public
      /// 
      /// Locales: en
      static let roomPublic = Rswift.StringResource(key: "room.public", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Purchase not found
      /// 
      /// Locales: en
      static let settingsRestoreFailTitle = Rswift.StringResource(key: "settings.restore.fail.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Refuse
      /// 
      /// Locales: en
      static let channelJoinRequestRefuse = Rswift.StringResource(key: "channel.join.request.refuse", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Remove ads
      /// 
      /// Locales: en
      static let premiumPrivAds = Rswift.StringResource(key: "premium.priv.ads", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Report
      /// 
      /// Locales: en
      static let reportTitle = Rswift.StringResource(key: "report.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Request has been sent
      /// 
      /// Locales: en
      static let channelJoinRequestSentTip = Rswift.StringResource(key: "channel.join.request.sent.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Restore Purchase
      /// 
      /// Locales: en
      static let settingsRestoreTitle = Rswift.StringResource(key: "settings.restore.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Room ID
      /// 
      /// Locales: en
      static let reportRoomId = Rswift.StringResource(key: "report.room.id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: SECRET
      /// 
      /// Locales: en
      static let addChannelSecretTitle = Rswift.StringResource(key: "add.channel.secret.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: SKIP TRIAL
      /// 
      /// Locales: en
      static let premiumSkipTrial = Rswift.StringResource(key: "premium.skip.trial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: SPEAKING
      /// 
      /// Locales: en
      static let channelUserListSpeakingTitle = Rswift.StringResource(key: "channel.user.list.speaking.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Save
      /// 
      /// Locales: en
      static let profileEditSaveBtn = Rswift.StringResource(key: "profile.edit.save.btn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Say something...
      /// 
      /// Locales: en
      static let amongChatRoomMessagePlaceholder = Rswift.StringResource(key: "among.chat.room.message.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sent
      /// 
      /// Locales: en
      static let socialJoinActionSent = Rswift.StringResource(key: "social.join.action.sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en
      static let profileSettings = Rswift.StringResource(key: "profile.settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en
      static let settingsTitle = Rswift.StringResource(key: "settings.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sexual content
      /// 
      /// Locales: en
      static let reportIncorrectSexual = Rswift.StringResource(key: "report.incorrect.sexual", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Social
      /// 
      /// Locales: en
      static let channelUserListSocialTitle = Rswift.StringResource(key: "channel.user.list.social.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Someone Noisy?
      /// 
      /// Locales: en
      static let channelUserListMuteActionTitle = Rswift.StringResource(key: "channel.user.list.mute.action.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Subscribe
      /// 
      /// Locales: en
      static let guideSubscribeTitle = Rswift.StringResource(key: "guide.subscribe.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Subscription Terms:
      /// 
      /// Locales: en
      static let premiumSubscriptionTerms = Rswift.StringResource(key: "premium.subscription.terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: TRY IT FREE
      /// 
      /// Locales: en
      static let premiumFreeTrial = Rswift.StringResource(key: "premium.free.trial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: TYPE YOUR TOPIC HERE
      /// 
      /// Locales: en
      static let amongChatCreateRoomInputPlaceholder = Rswift.StringResource(key: "among.chat.create.room.input.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Team up
      /// 
      /// Locales: en
      static let amongChatHomeTeamUp = Rswift.StringResource(key: "among.chat.home.team.up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms of Service
      /// 
      /// Locales: en
      static let termsService = Rswift.StringResource(key: "terms.service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Thanks for reporting. It would be processed within 24 hours.
      /// 
      /// Locales: en
      static let reportSuccess = Rswift.StringResource(key: "report.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: They won’t be able to add you friend or invite you in room. We won’t let them know you blocked them
      /// 
      /// Locales: en
      static let channelUserListBlockActionMsg = Rswift.StringResource(key: "channel.user.list.block.action.msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: This passcode can enter a secret channel, enter now?
      /// 
      /// Locales: en
      static let enterSecretChannelAlertDesc = Rswift.StringResource(key: "enter.secret.channel.alert.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Timeout
      /// 
      /// Locales: en
      static let amongChatRoomTipTimeout = Rswift.StringResource(key: "among.chat.room.tip.timeout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: To be a VIP member to talk with more users simultaneously
      /// 
      /// Locales: en
      static let channelSpeakingLimitModalMsg = Rswift.StringResource(key: "channel.speaking.limit.modal.msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Try it FREE
      /// 
      /// Locales: en
      static let premiumTryTitle = Rswift.StringResource(key: "premium.try.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: USERNAME
      /// 
      /// Locales: en
      static let profileInitialUserNameTitle = Rswift.StringResource(key: "profile.initial.user.name.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unblock
      /// 
      /// Locales: en
      static let alertUnblock = Rswift.StringResource(key: "alert.unblock", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unfollow
      /// 
      /// Locales: en
      static let socialUnfollow = Rswift.StringResource(key: "social.unfollow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unlock all categories
      /// 
      /// Locales: en
      static let premiumPrivCategories = Rswift.StringResource(key: "premium.priv.categories", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unlock all themes
      /// 
      /// Locales: en
      static let premiumPrivThemes = Rswift.StringResource(key: "premium.priv.themes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unmute
      /// 
      /// Locales: en
      static let channelUserListUnmute = Rswift.StringResource(key: "channel.user.list.unmute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unreachable networking!
      /// 
      /// Locales: en
      static let networkNotReachable = Rswift.StringResource(key: "network.not.reachable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unreasonable demands
      /// 
      /// Locales: en
      static let reportIncorrectUnreasonable = Rswift.StringResource(key: "report.incorrect.unreasonable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Upgrade to PRO
      /// 
      /// Locales: en
      static let channelSpeakingLimitModalUpgrade = Rswift.StringResource(key: "channel.speaking.limit.modal.upgrade", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: User ID
      /// 
      /// Locales: en
      static let reportUserId = Rswift.StringResource(key: "report.user.id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Username
      /// 
      /// Locales: en
      static let profileEditUsername = Rswift.StringResource(key: "profile.edit.username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Users
      /// 
      /// Locales: en
      static let socialBlockedUserTitle = Rswift.StringResource(key: "social.blocked.user.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Users Talked in the Channel
      /// 
      /// Locales: en
      static let userListTitle = Rswift.StringResource(key: "user.list.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Vote which games we should support next!
      /// 
      /// Locales: en
      static let amongChatAllRoomsVoteGame = Rswift.StringResource(key: "among.chat.all.rooms.vote.game", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: What about you, %1$@
      /// 
      /// Locales: en
      static let amongChatRoomStartGameTip2 = Rswift.StringResource(key: "among.chat.room.start.game.tip2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Yes, is me!
      /// 
      /// Locales: en
      static let profileInitialConfirmBtn = Rswift.StringResource(key: "profile.initial.confirm.btn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You can block or report the abusive users here.
      /// 
      /// Locales: en
      static let userListMoreSheet = Rswift.StringResource(key: "user.list.more.sheet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You don't have any secret channel yet, create or join one
      /// 
      /// Locales: en
      static let addChannelSecretEmptyJoined = Rswift.StringResource(key: "add.channel.secret.empty.joined", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You only have one secret channel
      /// 
      /// Locales: en
      static let toastSingleSecretChannal = Rswift.StringResource(key: "toast.single.secret.channal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your followings has reached maximum of %1$@
      /// 
      /// Locales: en
      static let socialFollowingMaximiumTip = Rswift.StringResource(key: "social.following.maximium.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your friend wants to join you
      /// 
      /// Locales: en
      static let channelJoinRequestModalTitle = Rswift.StringResource(key: "channel.join.request.modal.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your friend wants to join your secret room and chat with you and your friends, would you like
      /// 
      /// Locales: en
      static let channelJoinRequestModalMsg = Rswift.StringResource(key: "channel.join.request.modal.msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your passcode has no corresponding secret channel, create or join one 
      /// 
      /// Locales: en
      static let addChannelSecretErrorPasscode = Rswift.StringResource(key: "add.channel.secret.error.passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your secret channel is invalid, create or join one 👇👇👇
      /// 
      /// Locales: en
      static let addChannelSecretInvalid = Rswift.StringResource(key: "add.channel.secret.invalid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You’re all set
      /// 
      /// Locales: en
      static let settingsRestoreSuccessTitle = Rswift.StringResource(key: "settings.restore.success.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: add the host in roblox to join their game! tap to copy
      /// 
      /// Locales: en
      static let roomRobloxDefaultNotes = Rswift.StringResource(key: "room.roblox.default.notes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: lifetime
      /// 
      /// Locales: en
      static let premiumLifetime = Rswift.StringResource(key: "premium.lifetime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: wait till you have enough crewmates. then open a room in game and find each other thru private code
      /// 
      /// Locales: en
      static let roomChillingDefaultNotes = Rswift.StringResource(key: "room.chilling.default.notes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: your purchase was successful
      /// 
      /// Locales: en
      static let settingsRestoreSuccessBody = Rswift.StringResource(key: "settings.restore.success.body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: %1$@ enters room
      /// 
      /// Locales: en
      static func channelJoinRequestEnterRoomMsg(_ value1: String) -> String {
        return String(format: NSLocalizedString("channel.join.request.enter.room.msg", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %1$@ playing
      /// 
      /// Locales: en
      static func amongChatHomeNowplaying(_ value1: String) -> String {
        return String(format: NSLocalizedString("among.chat.home.nowplaying", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %1$@ refuses your request
      /// 
      /// Locales: en
      static func channelJoinRequestRefusedMsg(_ value1: String) -> String {
        return String(format: NSLocalizedString("channel.join.request.refused.msg", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@ subscription is %@, it automatically renews unless turned off in Accounting Settings at least 24h before current period ends. Payment is charged to your iTunes Account, cancel any time.
      /// 
      /// Locales: en
      static func premiumSubscriptionDetailNormal(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("premium.subscription.detail.normal", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: 3 days free trial, then %@ / Year
      /// 
      /// Locales: en
      static func premiumTryTitleDes(_ value1: String) -> String {
        return String(format: NSLocalizedString("premium.try.title.des", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: 3D Free Trials
      /// 
      /// Locales: en
      static func premiumFree3dTrial(_: Void = ()) -> String {
        return NSLocalizedString("premium.free.3d.trial", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Accept
      /// 
      /// Locales: en
      static func channelJoinRequestAccept(_: Void = ()) -> String {
        return NSLocalizedString("channel.join.request.accept", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: After the free trial, %@ subscription is %@, it automatically renews unless turned off in Accounting Settings at least 24h before current period ends. Payment is charged to your iTunes Account, cancel any time.
      /// 
      /// Locales: en
      static func premiumSubscriptionDetailFree(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("premium.subscription.detail.free", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: All Channels
      /// 
      /// Locales: en
      static func amongChatHomeHashTagsMore(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.home.hash.tags.more", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: AmongUs
      /// 
      /// Locales: en
      static func amongChatHomeTagAmongB(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.home.tag.among.b", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are you sure to exit the room?
      /// 
      /// Locales: en
      static func amongChatLeaveRoomTipTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.leave.room.tip.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Birthday
      /// 
      /// Locales: en
      static func profileEditBirthday(_: Void = ()) -> String {
        return NSLocalizedString("profile.edit.birthday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Birthday can be edited only one time in seven days.
      /// 
      /// Locales: en
      static func profielEditBirthdayCantTip(_: Void = ()) -> String {
        return NSLocalizedString("profiel.edit.birthday.cant.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Block
      /// 
      /// Locales: en
      static func alertBlock(_: Void = ()) -> String {
        return NSLocalizedString("alert.block", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Block Username?
      /// 
      /// Locales: en
      static func channelUserListBlockActionTitle(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.list.block.action.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Block users
      /// 
      /// Locales: en
      static func profileBlockUser(_: Void = ()) -> String {
        return NSLocalizedString("profile.block.user", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Break the mic max limit
      /// 
      /// Locales: en
      static func channelSpeakingLimitModalTitle(_: Void = ()) -> String {
        return NSLocalizedString("channel.speaking.limit.modal.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CHANNEL NAME
      /// 
      /// Locales: en
      static func inputPasscodeGlobalPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("input.passcode.global.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Can this be your image and name in Among Chat?
      /// 
      /// Locales: en
      static func profileInitialTip(_: Void = ()) -> String {
        return NSLocalizedString("profile.initial.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en
      static func toastCancel(_: Void = ()) -> String {
        return NSLocalizedString("toast.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Change theme automatically
      /// 
      /// Locales: en
      static func premiumPrivAutomatically(_: Void = ()) -> String {
        return NSLocalizedString("premium.priv.automatically", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Channel does not exist
      /// 
      /// Locales: en
      static func channelNotExist(_: Void = ()) -> String {
        return NSLocalizedString("channel.not.exist", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Checking
      /// 
      /// Locales: en
      static func channelChecking(_: Void = ()) -> String {
        return NSLocalizedString("channel.checking", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Continue
      /// 
      /// Locales: en
      static func guideContinue(_: Void = ()) -> String {
        return NSLocalizedString("guide.continue", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copied
      /// 
      /// Locales: en
      static func copied(_: Void = ()) -> String {
        return NSLocalizedString("copied", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create
      /// 
      /// Locales: en
      static func amongChatCreateRoomTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.create.room.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create %1$@ room
      /// 
      /// Locales: en
      static func amongChatCreateRoomConfirmBtn(_ value1: String) -> String {
        return String(format: NSLocalizedString("among.chat.create.room.confirm.btn", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Create Global Channel
      /// 
      /// Locales: en
      static func addChannelGlobalTipsTitle(_: Void = ()) -> String {
        return NSLocalizedString("add.channel.global.tips.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create a channel visible to everyone and chat with them
      /// 
      /// Locales: en
      static func addChannelGlobalTipsDes(_: Void = ()) -> String {
        return NSLocalizedString("add.channel.global.tips.des", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create secret channel to chat with your friends
      /// 
      /// Locales: en
      static func addChannelSecretCreateTipsDes(_: Void = ()) -> String {
        return NSLocalizedString("add.channel.secret.create.tips.des", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CreatePrivateChannel
      /// 
      /// Locales: en
      static func amongChatHomeTagCreatePrivate(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.home.tag.create.private", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Don't want to hear someone's voice? You can mute him, then you won't hear his voice in any room
      /// 
      /// Locales: en
      static func channelUserListMuteActionMsg(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.list.mute.action.msg", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Download “Among Chat talk to friends” First
      /// 
      /// Locales: en
      static func shareTiktokContentDowload(_: Void = ()) -> String {
        return NSLocalizedString("share.tiktok.content.dowload", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ERROR MAX USERS
      /// 
      /// Locales: en
      static func channelUserMaxState(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.max.state", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Edit
      /// 
      /// Locales: en
      static func profileEdit(_: Void = ()) -> String {
        return NSLocalizedString("profile.edit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: End user License Agreement
      /// 
      /// Locales: en
      static func endUserLicenseTitle(_: Void = ()) -> String {
        return NSLocalizedString("end.user.license.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter the Secret Channel?
      /// 
      /// Locales: en
      static func enterSecretChannelAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("enter.secret.channel.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed
      /// 
      /// Locales: en
      static func amongChatRoomTipFailed(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.tip.failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: FindCrewmates
      /// 
      /// Locales: en
      static func amongChatHomeTagAmongA(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.home.tag.among.a", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Follow
      /// 
      /// Locales: en
      static func channelUserListFollow(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.list.follow", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Follow Back
      /// 
      /// Locales: en
      static func socialFollowerFollowAction(_: Void = ()) -> String {
        return NSLocalizedString("social.follower.follow.action", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Followed user
      /// 
      /// Locales: en
      static func channelUserListFollowedTitle(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.list.followed.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Follower
      /// 
      /// Locales: en
      static func profileFollower(_: Void = ()) -> String {
        return NSLocalizedString("profile.follower", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Following
      /// 
      /// Locales: en
      static func profileFollowing(_: Void = ()) -> String {
        return NSLocalizedString("profile.following", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Friends
      /// 
      /// Locales: en
      static func socialRelationFriend(_: Void = ()) -> String {
        return NSLocalizedString("social.relation.friend", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: GLOBAL
      /// 
      /// Locales: en
      static func addChannelGlobalTitle(_: Void = ()) -> String {
        return NSLocalizedString("add.channel.global.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Google
      /// 
      /// Locales: en
      static func loginGoogle(_: Void = ()) -> String {
        return NSLocalizedString("login.google", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: GroupChat
      /// 
      /// Locales: en
      static func amongChatHomeTagGroup(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.home.tag.group", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Harassment or repulsive language
      /// 
      /// Locales: en
      static func reportIncorrectHarassment(_: Void = ()) -> String {
        return NSLocalizedString("report.incorrect.harassment", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Host's notes:
      /// 
      /// Locales: en
      static func roomHostsNotes(_: Void = ()) -> String {
        return NSLocalizedString("room.hosts.notes", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Hot topic
      /// 
      /// Locales: en
      static func amongChatCreateRoomTopicTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.create.room.topic.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I Know
      /// 
      /// Locales: en
      static func iKnow(_: Void = ()) -> String {
        return NSLocalizedString("i.know", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: In %1$@
      /// 
      /// Locales: en
      static func socialStatusInSomeroom(_ value1: String) -> String {
        return String(format: NSLocalizedString("social.status.in.someroom", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Incorrect information
      /// 
      /// Locales: en
      static func reportIncorrectInformation(_: Void = ()) -> String {
        return NSLocalizedString("report.incorrect.information", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invitation has been sent
      /// 
      /// Locales: en
      static func channelInviteSentTip(_: Void = ()) -> String {
        return NSLocalizedString("channel.invite.sent.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invite friends
      /// 
      /// Locales: en
      static func profileInviteFriends(_: Void = ()) -> String {
        return NSLocalizedString("profile.invite.friends", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: It's time to start the game! Let's pick a lucky guy to open a room in Among Us.
      /// 
      /// Locales: en
      static func amongChatRoomStartGameTip1(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.start.game.tip1", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Join
      /// 
      /// Locales: en
      static func socialJoinAction(_: Void = ()) -> String {
        return NSLocalizedString("social.join.action", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Join Friend’s Channel
      /// 
      /// Locales: en
      static func joinChannelSecretTipsTitle(_: Void = ()) -> String {
        return NSLocalizedString("join.channel.secret.tips.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Join in %@ talk to me & have fun !!!
      /// 
      /// Locales: en
      static func shareTiktokPublicTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("share.tiktok.public.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Join in my SERET CHANNEL %@ talk to me !!!
      /// 
      /// Locales: en
      static func shareTiktokPrivateTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("share.tiktok.private.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Join secret channel to chat with your friends
      /// 
      /// Locales: en
      static func addChannelSecretTipsDes(_: Void = ()) -> String {
        return NSLocalizedString("add.channel.secret.tips.des", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: JoinPrivateChannel
      /// 
      /// Locales: en
      static func amongChatHomeTagJoinPrivate(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.home.tag.join.private", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Just Chatting
      /// 
      /// Locales: en
      static func roomTagChilling(_: Void = ()) -> String {
        return NSLocalizedString("room.tag.chilling", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Kick Selected (%@)
      /// 
      /// Locales: en
      static func amongChatRoomKickSelected(_ value1: String) -> String {
        return String(format: NSLocalizedString("among.chat.room.kick.selected", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: LISTEN
      /// 
      /// Locales: en
      static func channelUserListListenTitle(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.list.listen.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Let's match & chat
      /// 
      /// Locales: en
      static func amomgChatHomeHashTagsTitle(_: Void = ()) -> String {
        return NSLocalizedString("amomg.chat.home.hash.tags.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MAX
      /// 
      /// Locales: en
      static func channelUserMax(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.max", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MIC OFF
      /// 
      /// Locales: en
      static func amongChatRoomTipMicOff(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.tip.mic.off", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MIC ON
      /// 
      /// Locales: en
      static func amongChatRoomTipMicOn(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.tip.mic.on", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: More channels coming soon!
      /// 
      /// Locales: en
      static func amongChatAllRoomsMore(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.all.rooms.more", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mute
      /// 
      /// Locales: en
      static func channelUserListMute(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.list.mute", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mute Now
      /// 
      /// Locales: en
      static func channelUserListMuteAction(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.list.mute.action", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Muted
      /// 
      /// Locales: en
      static func roomUserListMuted(_: Void = ()) -> String {
        return NSLocalizedString("room.user.list.muted", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No ad available, please try again later. 
      /// 
      /// Locales: en
      static func noAdAlert(_: Void = ()) -> String {
        return NSLocalizedString("no.ad.alert", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No purchases were found on your account
      /// 
      /// Locales: en
      static func settingsRestoreFailBody(_: Void = ()) -> String {
        return NSLocalizedString("settings.restore.fail.body", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Nobody listens yet
      /// 
      /// Locales: en
      static func channelUserListListenEmptyText(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.list.listen.empty.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Nobody speaks yet
      /// 
      /// Locales: en
      static func channelUserListSpeakEmptyText(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.list.speak.empty.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en
      static func toastConfirm(_: Void = ()) -> String {
        return NSLocalizedString("toast.confirm", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Offline
      /// 
      /// Locales: en
      static func socialStatusOffline(_: Void = ()) -> String {
        return NSLocalizedString("social.status.offline", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ok
      /// 
      /// Locales: en
      static func alertOk(_: Void = ()) -> String {
        return NSLocalizedString("alert.ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Online
      /// 
      /// Locales: en
      static func socialStatusOnline(_: Void = ()) -> String {
        return NSLocalizedString("social.status.online", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Open Game
      /// 
      /// Locales: en
      static func roomTagOpenGame(_: Void = ()) -> String {
        return NSLocalizedString("room.tag.open.game", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PASSCODE
      /// 
      /// Locales: en
      static func inputPasscodePlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("input.passcode.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PRO
      /// 
      /// Locales: en
      static func channelUserListProBadge(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.list.pro.badge", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Passcode does not exist
      /// 
      /// Locales: en
      static func privateErrorCode(_: Void = ()) -> String {
        return NSLocalizedString("private.error.code", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pay once, No Subscription
      /// 
      /// Locales: en
      static func premiumSubscriptionDetailLifetime(_: Void = ()) -> String {
        return NSLocalizedString("premium.subscription.detail.lifetime", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please update to the newest version of the app to continue playing.
      /// 
      /// Locales: en
      static func forceUpgradeTip(_: Void = ()) -> String {
        return NSLocalizedString("force.upgrade.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Privacy Policy
      /// 
      /// Locales: en
      static func termsPrivacy(_: Void = ()) -> String {
        return NSLocalizedString("terms.privacy", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Privacy Policy & Terms of Service
      /// 
      /// Locales: en
      static func privacyLabel(_: Void = ()) -> String {
        return NSLocalizedString("privacy.label", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Private
      /// 
      /// Locales: en
      static func amongChatCreateRoomPrivate(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.create.room.private", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Private
      /// 
      /// Locales: en
      static func roomPrivate(_: Void = ()) -> String {
        return NSLocalizedString("room.private", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Public
      /// 
      /// Locales: en
      static func roomPublic(_: Void = ()) -> String {
        return NSLocalizedString("room.public", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Purchase not found
      /// 
      /// Locales: en
      static func settingsRestoreFailTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.restore.fail.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Refuse
      /// 
      /// Locales: en
      static func channelJoinRequestRefuse(_: Void = ()) -> String {
        return NSLocalizedString("channel.join.request.refuse", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Remove ads
      /// 
      /// Locales: en
      static func premiumPrivAds(_: Void = ()) -> String {
        return NSLocalizedString("premium.priv.ads", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Report
      /// 
      /// Locales: en
      static func reportTitle(_: Void = ()) -> String {
        return NSLocalizedString("report.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Request has been sent
      /// 
      /// Locales: en
      static func channelJoinRequestSentTip(_: Void = ()) -> String {
        return NSLocalizedString("channel.join.request.sent.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Restore Purchase
      /// 
      /// Locales: en
      static func settingsRestoreTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.restore.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Room ID
      /// 
      /// Locales: en
      static func reportRoomId(_: Void = ()) -> String {
        return NSLocalizedString("report.room.id", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SECRET
      /// 
      /// Locales: en
      static func addChannelSecretTitle(_: Void = ()) -> String {
        return NSLocalizedString("add.channel.secret.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SKIP TRIAL
      /// 
      /// Locales: en
      static func premiumSkipTrial(_: Void = ()) -> String {
        return NSLocalizedString("premium.skip.trial", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SPEAKING
      /// 
      /// Locales: en
      static func channelUserListSpeakingTitle(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.list.speaking.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Save
      /// 
      /// Locales: en
      static func profileEditSaveBtn(_: Void = ()) -> String {
        return NSLocalizedString("profile.edit.save.btn", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Say something...
      /// 
      /// Locales: en
      static func amongChatRoomMessagePlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.message.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sent
      /// 
      /// Locales: en
      static func socialJoinActionSent(_: Void = ()) -> String {
        return NSLocalizedString("social.join.action.sent", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en
      static func profileSettings(_: Void = ()) -> String {
        return NSLocalizedString("profile.settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en
      static func settingsTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sexual content
      /// 
      /// Locales: en
      static func reportIncorrectSexual(_: Void = ()) -> String {
        return NSLocalizedString("report.incorrect.sexual", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Social
      /// 
      /// Locales: en
      static func channelUserListSocialTitle(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.list.social.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Someone Noisy?
      /// 
      /// Locales: en
      static func channelUserListMuteActionTitle(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.list.mute.action.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Subscribe
      /// 
      /// Locales: en
      static func guideSubscribeTitle(_: Void = ()) -> String {
        return NSLocalizedString("guide.subscribe.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Subscription Terms:
      /// 
      /// Locales: en
      static func premiumSubscriptionTerms(_: Void = ()) -> String {
        return NSLocalizedString("premium.subscription.terms", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: TRY IT FREE
      /// 
      /// Locales: en
      static func premiumFreeTrial(_: Void = ()) -> String {
        return NSLocalizedString("premium.free.trial", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: TYPE YOUR TOPIC HERE
      /// 
      /// Locales: en
      static func amongChatCreateRoomInputPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.create.room.input.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Team up
      /// 
      /// Locales: en
      static func amongChatHomeTeamUp(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.home.team.up", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Terms of Service
      /// 
      /// Locales: en
      static func termsService(_: Void = ()) -> String {
        return NSLocalizedString("terms.service", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Thanks for reporting. It would be processed within 24 hours.
      /// 
      /// Locales: en
      static func reportSuccess(_: Void = ()) -> String {
        return NSLocalizedString("report.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: They won’t be able to add you friend or invite you in room. We won’t let them know you blocked them
      /// 
      /// Locales: en
      static func channelUserListBlockActionMsg(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.list.block.action.msg", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This passcode can enter a secret channel, enter now?
      /// 
      /// Locales: en
      static func enterSecretChannelAlertDesc(_: Void = ()) -> String {
        return NSLocalizedString("enter.secret.channel.alert.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Timeout
      /// 
      /// Locales: en
      static func amongChatRoomTipTimeout(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.tip.timeout", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: To be a VIP member to talk with more users simultaneously
      /// 
      /// Locales: en
      static func channelSpeakingLimitModalMsg(_: Void = ()) -> String {
        return NSLocalizedString("channel.speaking.limit.modal.msg", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Try it FREE
      /// 
      /// Locales: en
      static func premiumTryTitle(_: Void = ()) -> String {
        return NSLocalizedString("premium.try.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: USERNAME
      /// 
      /// Locales: en
      static func profileInitialUserNameTitle(_: Void = ()) -> String {
        return NSLocalizedString("profile.initial.user.name.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unblock
      /// 
      /// Locales: en
      static func alertUnblock(_: Void = ()) -> String {
        return NSLocalizedString("alert.unblock", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unfollow
      /// 
      /// Locales: en
      static func socialUnfollow(_: Void = ()) -> String {
        return NSLocalizedString("social.unfollow", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unlock all categories
      /// 
      /// Locales: en
      static func premiumPrivCategories(_: Void = ()) -> String {
        return NSLocalizedString("premium.priv.categories", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unlock all themes
      /// 
      /// Locales: en
      static func premiumPrivThemes(_: Void = ()) -> String {
        return NSLocalizedString("premium.priv.themes", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unmute
      /// 
      /// Locales: en
      static func channelUserListUnmute(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.list.unmute", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unreachable networking!
      /// 
      /// Locales: en
      static func networkNotReachable(_: Void = ()) -> String {
        return NSLocalizedString("network.not.reachable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unreasonable demands
      /// 
      /// Locales: en
      static func reportIncorrectUnreasonable(_: Void = ()) -> String {
        return NSLocalizedString("report.incorrect.unreasonable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Upgrade to PRO
      /// 
      /// Locales: en
      static func channelSpeakingLimitModalUpgrade(_: Void = ()) -> String {
        return NSLocalizedString("channel.speaking.limit.modal.upgrade", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: User ID
      /// 
      /// Locales: en
      static func reportUserId(_: Void = ()) -> String {
        return NSLocalizedString("report.user.id", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Username
      /// 
      /// Locales: en
      static func profileEditUsername(_: Void = ()) -> String {
        return NSLocalizedString("profile.edit.username", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Users
      /// 
      /// Locales: en
      static func socialBlockedUserTitle(_: Void = ()) -> String {
        return NSLocalizedString("social.blocked.user.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Users Talked in the Channel
      /// 
      /// Locales: en
      static func userListTitle(_: Void = ()) -> String {
        return NSLocalizedString("user.list.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vote which games we should support next!
      /// 
      /// Locales: en
      static func amongChatAllRoomsVoteGame(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.all.rooms.vote.game", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: What about you, %1$@
      /// 
      /// Locales: en
      static func amongChatRoomStartGameTip2(_ value1: String) -> String {
        return String(format: NSLocalizedString("among.chat.room.start.game.tip2", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Yes, is me!
      /// 
      /// Locales: en
      static func profileInitialConfirmBtn(_: Void = ()) -> String {
        return NSLocalizedString("profile.initial.confirm.btn", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You can block or report the abusive users here.
      /// 
      /// Locales: en
      static func userListMoreSheet(_: Void = ()) -> String {
        return NSLocalizedString("user.list.more.sheet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You don't have any secret channel yet, create or join one
      /// 
      /// Locales: en
      static func addChannelSecretEmptyJoined(_: Void = ()) -> String {
        return NSLocalizedString("add.channel.secret.empty.joined", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You only have one secret channel
      /// 
      /// Locales: en
      static func toastSingleSecretChannal(_: Void = ()) -> String {
        return NSLocalizedString("toast.single.secret.channal", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your followings has reached maximum of %1$@
      /// 
      /// Locales: en
      static func socialFollowingMaximiumTip(_ value1: String) -> String {
        return String(format: NSLocalizedString("social.following.maximium.tip", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Your friend wants to join you
      /// 
      /// Locales: en
      static func channelJoinRequestModalTitle(_: Void = ()) -> String {
        return NSLocalizedString("channel.join.request.modal.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your friend wants to join your secret room and chat with you and your friends, would you like
      /// 
      /// Locales: en
      static func channelJoinRequestModalMsg(_: Void = ()) -> String {
        return NSLocalizedString("channel.join.request.modal.msg", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your passcode has no corresponding secret channel, create or join one 
      /// 
      /// Locales: en
      static func addChannelSecretErrorPasscode(_: Void = ()) -> String {
        return NSLocalizedString("add.channel.secret.error.passcode", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your secret channel is invalid, create or join one 👇👇👇
      /// 
      /// Locales: en
      static func addChannelSecretInvalid(_: Void = ()) -> String {
        return NSLocalizedString("add.channel.secret.invalid", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You’re all set
      /// 
      /// Locales: en
      static func settingsRestoreSuccessTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.restore.success.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: add the host in roblox to join their game! tap to copy
      /// 
      /// Locales: en
      static func roomRobloxDefaultNotes(_: Void = ()) -> String {
        return NSLocalizedString("room.roblox.default.notes", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: lifetime
      /// 
      /// Locales: en
      static func premiumLifetime(_: Void = ()) -> String {
        return NSLocalizedString("premium.lifetime", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: wait till you have enough crewmates. then open a room in game and find each other thru private code
      /// 
      /// Locales: en
      static func roomChillingDefaultNotes(_: Void = ()) -> String {
        return NSLocalizedString("room.chilling.default.notes", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: your purchase was successful
      /// 
      /// Locales: en
      static func settingsRestoreSuccessBody(_: Void = ()) -> String {
        return NSLocalizedString("settings.restore.success.body", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AmongChatRoomConfigView.validate()
      try _AmongChatRoomTopBar.validate()
      try _AmongRoomBottomBar.validate()
      try _ChannelUserCell.validate()
      try _ChannelUserListController.validate()
      try _GuideFirstView.validate()
      try _GuideFourthView.validate()
      try _GuideFourthView_b.validate()
      try _GuideSecondView.validate()
      try _GuideThirdView.validate()
      try _PremiumContainer.validate()
      try _ScreenContainer.validate()
      try _SecretChannelContainer.validate()
      try _ShareContainerView.validate()
      try _SnapChatCreativeShareView.validate()
      try _TikTokShareView.validate()
    }
    
    struct _AmongChatRoomConfigView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AmongChatRoomConfigView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ac_icon_not", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_icon_not' is used in nib 'AmongChatRoomConfigView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _AmongChatRoomTopBar: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AmongChatRoomTopBar"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ac_icon_kick_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_icon_kick_user' is used in nib 'AmongChatRoomTopBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ac_icon_leave", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_icon_leave' is used in nib 'AmongChatRoomTopBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ac_icon_room_report", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_icon_room_report' is used in nib 'AmongChatRoomTopBar', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _AmongInputCodeView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AmongInputCodeView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AmongInputNickNameView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AmongInputNickNameView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AmongInputNotesView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AmongInputNotesView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AmongRoomBottomBar: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AmongRoomBottomBar"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ac_icon_mic_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_icon_mic_on' is used in nib 'AmongRoomBottomBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ac_icon_send_message", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_icon_send_message' is used in nib 'AmongRoomBottomBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ac_icon_share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_icon_share' is used in nib 'AmongRoomBottomBar', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _AmongRoomInfoSetupView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AmongRoomInfoSetupView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AmongRoomInfoView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AmongRoomInfoView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AmongRoomToolView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AmongRoomToolView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AmongSheetController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AmongSheetController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AmongSheetIconItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AmongSheetIconItemCell
      
      let bundle = R.hostingBundle
      let identifier = "AmongSheetIconItemCell"
      let name = "AmongSheetIconItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AmongSheetIconItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AmongSheetIconItemCell
      }
      
      fileprivate init() {}
    }
    
    struct _AmongSheetUserCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AmongSheetUserCell
      
      let bundle = R.hostingBundle
      let identifier = "AmongSheetUserCell"
      let name = "AmongSheetUserCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AmongSheetUserCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AmongSheetUserCell
      }
      
      fileprivate init() {}
    }
    
    struct _ChannelUserCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ChannelUserCell
      
      let bundle = R.hostingBundle
      let identifier = "ChannelUserCell"
      let name = "ChannelUserCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChannelUserCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChannelUserCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_more_action", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_more_action' is used in nib 'ChannelUserCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_user_list_mic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_user_list_mic' is used in nib 'ChannelUserCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ChannelUserListController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ChannelUserListController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "backNor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backNor' is used in nib 'ChannelUserListController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_more_action", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_more_action' is used in nib 'ChannelUserListController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CreateGlobalChannelController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CreateGlobalChannelController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _CreateSecretChannelController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CreateSecretChannelController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _EndUserLicenseController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EndUserLicenseController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _GlobalChannelContainer: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GlobalChannelContainer"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _GuideFirstView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GuideFirstView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_guide_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guide_1' is used in nib 'GuideFirstView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star_bg' is used in nib 'GuideFirstView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _GuideFourthView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GuideFourthView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_close_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close_gray' is used in nib 'GuideFourthView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_emoji_hh", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_emoji_hh' is used in nib 'GuideFourthView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_emoji_kiss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_emoji_kiss' is used in nib 'GuideFourthView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_guide_4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guide_4' is used in nib 'GuideFourthView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'GuideFourthView', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _GuideFourthView_b: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GuideFourthView_b"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close' is used in nib 'GuideFourthView_b', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_guide_4_b", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guide_4_b' is used in nib 'GuideFourthView_b', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star_bg' is used in nib 'GuideFourthView_b', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _GuideSecondView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GuideSecondView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_guide_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guide_2' is used in nib 'GuideSecondView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _GuideThirdView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GuideThirdView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_guide_3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guide_3' is used in nib 'GuideThirdView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star_bg' is used in nib 'GuideThirdView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _JustChillingInfoView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "JustChillingInfoView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _PremiumContainer: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PremiumContainer"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close' is used in nib 'PremiumContainer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pro' is used in nib 'PremiumContainer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pro_persons", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pro_persons' is used in nib 'PremiumContainer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pro_select", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pro_select' is used in nib 'PremiumContainer', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'PremiumContainer', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ScreenContainer: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ScreenContainer"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_mic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_mic' is used in nib 'ScreenContainer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_room_lock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_room_lock' is used in nib 'ScreenContainer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_screen_bg_g_d_pdf", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_screen_bg_g_d_pdf' is used in nib 'ScreenContainer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_screen_bg_g_shadow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_screen_bg_g_shadow' is used in nib 'ScreenContainer', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SecretChannelContainer: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SecretChannelContainer"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_pri_ad", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pri_ad' is used in nib 'SecretChannelContainer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pri_join", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pri_join' is used in nib 'SecretChannelContainer', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ShareContainerView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ShareContainerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_share_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_share_bg' is used in nib 'ShareContainerView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SnapChatCreativeShareView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SnapChatCreativeShareView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "snapchat_share_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'snapchat_share_bg' is used in nib 'SnapChatCreativeShareView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _TikTokShareView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TikTokShareView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "public_share_bg_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'public_share_bg_2' is used in nib 'TikTokShareView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try guide.validate()
      try launchScreen.validate()
      try main.validate()
    }
    
    struct guide: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let guideViewController = StoryboardViewControllerResource<GuideViewController>(identifier: "GuideViewController")
      let name = "Guide"
      
      func guideViewController(_: Void = ()) -> GuideViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: guideViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.guide().guideViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'guideViewController' could not be loaded from storyboard 'Guide' as 'GuideViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "launch_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "launch_name", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch_name' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star_bg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NavigationViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      let premiumViewController = StoryboardViewControllerResource<PremiumViewController>(identifier: "PremiumViewController")
      let privateChannelController = StoryboardViewControllerResource<PrivateChannelController>(identifier: "PrivateChannelController")
      let privateShareController = StoryboardViewControllerResource<PrivateShareController>(identifier: "PrivateShareController")
      let pushSettingController = StoryboardViewControllerResource<PushSettingController>(identifier: "PushSettingController")
      let searchViewController = StoryboardViewControllerResource<SearchViewController>(identifier: "SearchViewController")
      let settingViewController = StoryboardViewControllerResource<SettingViewController>(identifier: "SettingViewController")
      
      func premiumViewController(_: Void = ()) -> PremiumViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: premiumViewController)
      }
      
      func privateChannelController(_: Void = ()) -> PrivateChannelController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: privateChannelController)
      }
      
      func privateShareController(_: Void = ()) -> PrivateShareController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: privateShareController)
      }
      
      func pushSettingController(_: Void = ()) -> PushSettingController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pushSettingController)
      }
      
      func searchViewController(_: Void = ()) -> SearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchViewController)
      }
      
      func settingViewController(_: Void = ()) -> SettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ac_rate_us", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_rate_us' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ac_right_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_right_arrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ac_share_app", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_share_app' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_add' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_call_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_call_on' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_down' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_power", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_power' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_private_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_private_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_share' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_up", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_up' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "home_btn_bg_b", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home_btn_bg_b' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "home_connect_btn_bg_b", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home_connect_btn_bg_b' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pri_ad", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pri_ad' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pri_join", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pri_join' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pro' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pro_persons", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pro_persons' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pro_select", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pro_select' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_push", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_push' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_room_lock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_room_lock' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_setting_diamonds_u", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_setting_diamonds_u' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "speak_button_dis", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'speak_button_dis' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "speak_button_nor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'speak_button_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "speak_button_pre", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'speak_button_pre' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().premiumViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'premiumViewController' could not be loaded from storyboard 'Main' as 'PremiumViewController'.") }
        if _R.storyboard.main().privateChannelController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'privateChannelController' could not be loaded from storyboard 'Main' as 'PrivateChannelController'.") }
        if _R.storyboard.main().privateShareController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'privateShareController' could not be loaded from storyboard 'Main' as 'PrivateShareController'.") }
        if _R.storyboard.main().pushSettingController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pushSettingController' could not be loaded from storyboard 'Main' as 'PushSettingController'.") }
        if _R.storyboard.main().searchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchViewController' could not be loaded from storyboard 'Main' as 'SearchViewController'.") }
        if _R.storyboard.main().settingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingViewController' could not be loaded from storyboard 'Main' as 'SettingViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
