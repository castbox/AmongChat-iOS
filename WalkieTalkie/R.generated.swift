//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `call.m4a`.
    static let callM4a = Rswift.FileResource(bundle: R.hostingBundle, name: "call", pathExtension: "m4a")
    /// Resource file `cbegin.mp3`.
    static let cbeginMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "cbegin", pathExtension: "mp3")
    /// Resource file `emojis.json`.
    static let emojisJson = Rswift.FileResource(bundle: R.hostingBundle, name: "emojis", pathExtension: "json")
    /// Resource file `end.mp3`.
    static let endMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "end", pathExtension: "mp3")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "call", withExtension: "m4a")`
    static func callM4a(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.callM4a
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "cbegin", withExtension: "mp3")`
    static func cbeginMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cbeginMp3
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "emojis", withExtension: "json")`
    static func emojisJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.emojisJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "end", withExtension: "mp3")`
    static func endMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.endMp3
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Rswift.Validatable {
    /// Font `BlackOpsOne-Regular`.
    static let blackOpsOneRegular = Rswift.FontResource(fontName: "BlackOpsOne-Regular")
    /// Font `Nunito-Black`.
    static let nunitoBlack = Rswift.FontResource(fontName: "Nunito-Black")
    /// Font `Nunito-Bold`.
    static let nunitoBold = Rswift.FontResource(fontName: "Nunito-Bold")
    /// Font `Nunito-SemiBold`.
    static let nunitoSemiBold = Rswift.FontResource(fontName: "Nunito-SemiBold")
    
    /// `UIFont(name: "BlackOpsOne-Regular", size: ...)`
    static func blackOpsOneRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: blackOpsOneRegular, size: size)
    }
    
    /// `UIFont(name: "Nunito-Black", size: ...)`
    static func nunitoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoBlack, size: size)
    }
    
    /// `UIFont(name: "Nunito-Bold", size: ...)`
    static func nunitoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoBold, size: size)
    }
    
    /// `UIFont(name: "Nunito-SemiBold", size: ...)`
    static func nunitoSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoSemiBold, size: size)
    }
    
    static func validate() throws {
      if R.font.blackOpsOneRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BlackOpsOne-Regular' could not be loaded, is 'BlackOpsOne-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-Black' could not be loaded, is 'Nunito-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-Bold' could not be loaded, is 'Nunito-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-SemiBold' could not be loaded, is 'Nunito-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 52 images.
  struct image {
    /// Image `backNor`.
    static let backNor = Rswift.ImageResource(bundle: R.hostingBundle, name: "backNor")
    /// Image `btn_add`.
    static let btn_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_add")
    /// Image `btn_call_off`.
    static let btn_call_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_call_off")
    /// Image `btn_call_on`.
    static let btn_call_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_call_on")
    /// Image `btn_down`.
    static let btn_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_down")
    /// Image `btn_power_on`.
    static let btn_power_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_power_on")
    /// Image `btn_power`.
    static let btn_power = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_power")
    /// Image `btn_private_icon`.
    static let btn_private_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_private_icon")
    /// Image `btn_private_small`.
    static let btn_private_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_private_small")
    /// Image `btn_share`.
    static let btn_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_share")
    /// Image `btn_up`.
    static let btn_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_up")
    /// Image `home_btn_bg_b`.
    static let home_btn_bg_b = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_btn_bg_b")
    /// Image `home_btn_bg`.
    static let home_btn_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_btn_bg")
    /// Image `home_connect_btn_bg_b`.
    static let home_connect_btn_bg_b = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_connect_btn_bg_b")
    /// Image `icon_close_gray`.
    static let icon_close_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close_gray")
    /// Image `icon_close`.
    static let icon_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close")
    /// Image `icon_emoji_hh`.
    static let icon_emoji_hh = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_emoji_hh")
    /// Image `icon_emoji_kiss`.
    static let icon_emoji_kiss = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_emoji_kiss")
    /// Image `icon_guide_1`.
    static let icon_guide_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guide_1")
    /// Image `icon_guide_2`.
    static let icon_guide_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guide_2")
    /// Image `icon_guide_3`.
    static let icon_guide_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guide_3")
    /// Image `icon_guide_4`.
    static let icon_guide_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guide_4")
    /// Image `icon_mic_disable`.
    static let icon_mic_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mic_disable")
    /// Image `icon_mic`.
    static let icon_mic = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mic")
    /// Image `icon_pri_ad`.
    static let icon_pri_ad = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pri_ad")
    /// Image `icon_pri_join`.
    static let icon_pri_join = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pri_join")
    /// Image `icon_pro_persons`.
    static let icon_pro_persons = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pro_persons")
    /// Image `icon_pro_select_y`.
    static let icon_pro_select_y = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pro_select_y")
    /// Image `icon_pro_select`.
    static let icon_pro_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pro_select")
    /// Image `icon_pro_y`.
    static let icon_pro_y = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pro_y")
    /// Image `icon_pro`.
    static let icon_pro = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pro")
    /// Image `icon_push`.
    static let icon_push = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_push")
    /// Image `icon_room_lock`.
    static let icon_room_lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_room_lock")
    /// Image `icon_screen_bg_g_d_pdf`.
    static let icon_screen_bg_g_d_pdf = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_screen_bg_g_d_pdf")
    /// Image `icon_screen_bg_g_shadow_round`.
    static let icon_screen_bg_g_shadow_round = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_screen_bg_g_shadow_round")
    /// Image `icon_screen_bg_g_shadow`.
    static let icon_screen_bg_g_shadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_screen_bg_g_shadow")
    /// Image `icon_screen_bg_g`.
    static let icon_screen_bg_g = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_screen_bg_g")
    /// Image `icon_screen_bg_o_d`.
    static let icon_screen_bg_o_d = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_screen_bg_o_d")
    /// Image `icon_screen_bg_o_shadow_round`.
    static let icon_screen_bg_o_shadow_round = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_screen_bg_o_shadow_round")
    /// Image `icon_screen_bg_o_shadow`.
    static let icon_screen_bg_o_shadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_screen_bg_o_shadow")
    /// Image `icon_screen_bg_o`.
    static let icon_screen_bg_o = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_screen_bg_o")
    /// Image `icon_setting_diamonds_u`.
    static let icon_setting_diamonds_u = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting_diamonds_u")
    /// Image `icon_setting_diamonds`.
    static let icon_setting_diamonds = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting_diamonds")
    /// Image `icon_setting_star`.
    static let icon_setting_star = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting_star")
    /// Image `icon_setting`.
    static let icon_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting")
    /// Image `launch_logo`.
    static let launch_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_logo")
    /// Image `launch_name`.
    static let launch_name = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_name")
    /// Image `logo_snapchat`.
    static let logo_snapchat = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_snapchat")
    /// Image `share_logo`.
    static let share_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_logo")
    /// Image `snapchat_share_bg`.
    static let snapchat_share_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "snapchat_share_bg")
    /// Image `speak_button_nor`.
    static let speak_button_nor = Rswift.ImageResource(bundle: R.hostingBundle, name: "speak_button_nor")
    /// Image `speak_button_pre`.
    static let speak_button_pre = Rswift.ImageResource(bundle: R.hostingBundle, name: "speak_button_pre")
    
    /// `UIImage(named: "backNor", bundle: ..., traitCollection: ...)`
    static func backNor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backNor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_add", bundle: ..., traitCollection: ...)`
    static func btn_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_call_off", bundle: ..., traitCollection: ...)`
    static func btn_call_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_call_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_call_on", bundle: ..., traitCollection: ...)`
    static func btn_call_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_call_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_down", bundle: ..., traitCollection: ...)`
    static func btn_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_power", bundle: ..., traitCollection: ...)`
    static func btn_power(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_power, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_power_on", bundle: ..., traitCollection: ...)`
    static func btn_power_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_power_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_private_icon", bundle: ..., traitCollection: ...)`
    static func btn_private_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_private_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_private_small", bundle: ..., traitCollection: ...)`
    static func btn_private_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_private_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_share", bundle: ..., traitCollection: ...)`
    static func btn_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_up", bundle: ..., traitCollection: ...)`
    static func btn_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_btn_bg", bundle: ..., traitCollection: ...)`
    static func home_btn_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_btn_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_btn_bg_b", bundle: ..., traitCollection: ...)`
    static func home_btn_bg_b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_btn_bg_b, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_connect_btn_bg_b", bundle: ..., traitCollection: ...)`
    static func home_connect_btn_bg_b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_connect_btn_bg_b, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_close", bundle: ..., traitCollection: ...)`
    static func icon_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_close_gray", bundle: ..., traitCollection: ...)`
    static func icon_close_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_emoji_hh", bundle: ..., traitCollection: ...)`
    static func icon_emoji_hh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_emoji_hh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_emoji_kiss", bundle: ..., traitCollection: ...)`
    static func icon_emoji_kiss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_emoji_kiss, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_guide_1", bundle: ..., traitCollection: ...)`
    static func icon_guide_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guide_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_guide_2", bundle: ..., traitCollection: ...)`
    static func icon_guide_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guide_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_guide_3", bundle: ..., traitCollection: ...)`
    static func icon_guide_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guide_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_guide_4", bundle: ..., traitCollection: ...)`
    static func icon_guide_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guide_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_mic", bundle: ..., traitCollection: ...)`
    static func icon_mic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_mic_disable", bundle: ..., traitCollection: ...)`
    static func icon_mic_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mic_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pri_ad", bundle: ..., traitCollection: ...)`
    static func icon_pri_ad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pri_ad, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pri_join", bundle: ..., traitCollection: ...)`
    static func icon_pri_join(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pri_join, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pro", bundle: ..., traitCollection: ...)`
    static func icon_pro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pro, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pro_persons", bundle: ..., traitCollection: ...)`
    static func icon_pro_persons(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pro_persons, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pro_select", bundle: ..., traitCollection: ...)`
    static func icon_pro_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pro_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pro_select_y", bundle: ..., traitCollection: ...)`
    static func icon_pro_select_y(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pro_select_y, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pro_y", bundle: ..., traitCollection: ...)`
    static func icon_pro_y(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pro_y, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_push", bundle: ..., traitCollection: ...)`
    static func icon_push(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_push, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_room_lock", bundle: ..., traitCollection: ...)`
    static func icon_room_lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_room_lock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_screen_bg_g", bundle: ..., traitCollection: ...)`
    static func icon_screen_bg_g(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_screen_bg_g, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_screen_bg_g_d_pdf", bundle: ..., traitCollection: ...)`
    static func icon_screen_bg_g_d_pdf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_screen_bg_g_d_pdf, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_screen_bg_g_shadow", bundle: ..., traitCollection: ...)`
    static func icon_screen_bg_g_shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_screen_bg_g_shadow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_screen_bg_g_shadow_round", bundle: ..., traitCollection: ...)`
    static func icon_screen_bg_g_shadow_round(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_screen_bg_g_shadow_round, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_screen_bg_o", bundle: ..., traitCollection: ...)`
    static func icon_screen_bg_o(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_screen_bg_o, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_screen_bg_o_d", bundle: ..., traitCollection: ...)`
    static func icon_screen_bg_o_d(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_screen_bg_o_d, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_screen_bg_o_shadow", bundle: ..., traitCollection: ...)`
    static func icon_screen_bg_o_shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_screen_bg_o_shadow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_screen_bg_o_shadow_round", bundle: ..., traitCollection: ...)`
    static func icon_screen_bg_o_shadow_round(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_screen_bg_o_shadow_round, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting", bundle: ..., traitCollection: ...)`
    static func icon_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting_diamonds", bundle: ..., traitCollection: ...)`
    static func icon_setting_diamonds(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting_diamonds, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting_diamonds_u", bundle: ..., traitCollection: ...)`
    static func icon_setting_diamonds_u(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting_diamonds_u, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting_star", bundle: ..., traitCollection: ...)`
    static func icon_setting_star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting_star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch_logo", bundle: ..., traitCollection: ...)`
    static func launch_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch_name", bundle: ..., traitCollection: ...)`
    static func launch_name(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_name, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_snapchat", bundle: ..., traitCollection: ...)`
    static func logo_snapchat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_snapchat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_logo", bundle: ..., traitCollection: ...)`
    static func share_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "snapchat_share_bg", bundle: ..., traitCollection: ...)`
    static func snapchat_share_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snapchat_share_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "speak_button_nor", bundle: ..., traitCollection: ...)`
    static func speak_button_nor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speak_button_nor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "speak_button_pre", bundle: ..., traitCollection: ...)`
    static func speak_button_pre(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speak_button_pre, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 11 nibs.
  struct nib {
    /// Nib `CreateGlobalChannelController`.
    static let createGlobalChannelController = _R.nib._CreateGlobalChannelController()
    /// Nib `CreateSecretChannelController`.
    static let createSecretChannelController = _R.nib._CreateSecretChannelController()
    /// Nib `GlobalChannelContainer`.
    static let globalChannelContainer = _R.nib._GlobalChannelContainer()
    /// Nib `GuideFirstView`.
    static let guideFirstView = _R.nib._GuideFirstView()
    /// Nib `GuideFourthView`.
    static let guideFourthView = _R.nib._GuideFourthView()
    /// Nib `GuideSecondView`.
    static let guideSecondView = _R.nib._GuideSecondView()
    /// Nib `GuideThirdView`.
    static let guideThirdView = _R.nib._GuideThirdView()
    /// Nib `PremiumContainer`.
    static let premiumContainer = _R.nib._PremiumContainer()
    /// Nib `ScreenContainer`.
    static let screenContainer = _R.nib._ScreenContainer()
    /// Nib `SecretChannelContainer`.
    static let secretChannelContainer = _R.nib._SecretChannelContainer()
    /// Nib `SnapChatCreativeShareView`.
    static let snapChatCreativeShareView = _R.nib._SnapChatCreativeShareView()
    
    /// `UINib(name: "CreateGlobalChannelController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.createGlobalChannelController) instead")
    static func createGlobalChannelController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.createGlobalChannelController)
    }
    
    /// `UINib(name: "CreateSecretChannelController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.createSecretChannelController) instead")
    static func createSecretChannelController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.createSecretChannelController)
    }
    
    /// `UINib(name: "GlobalChannelContainer", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.globalChannelContainer) instead")
    static func globalChannelContainer(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.globalChannelContainer)
    }
    
    /// `UINib(name: "GuideFirstView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideFirstView) instead")
    static func guideFirstView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideFirstView)
    }
    
    /// `UINib(name: "GuideFourthView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideFourthView) instead")
    static func guideFourthView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideFourthView)
    }
    
    /// `UINib(name: "GuideSecondView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideSecondView) instead")
    static func guideSecondView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideSecondView)
    }
    
    /// `UINib(name: "GuideThirdView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideThirdView) instead")
    static func guideThirdView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideThirdView)
    }
    
    /// `UINib(name: "PremiumContainer", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.premiumContainer) instead")
    static func premiumContainer(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.premiumContainer)
    }
    
    /// `UINib(name: "ScreenContainer", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.screenContainer) instead")
    static func screenContainer(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.screenContainer)
    }
    
    /// `UINib(name: "SecretChannelContainer", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.secretChannelContainer) instead")
    static func secretChannelContainer(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.secretChannelContainer)
    }
    
    /// `UINib(name: "SnapChatCreativeShareView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.snapChatCreativeShareView) instead")
    static func snapChatCreativeShareView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.snapChatCreativeShareView)
    }
    
    static func createGlobalChannelController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.createGlobalChannelController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func createSecretChannelController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.createSecretChannelController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func globalChannelContainer(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.globalChannelContainer.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func guideFirstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.guideFirstView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func guideFourthView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.guideFourthView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func guideSecondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.guideSecondView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func guideThirdView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.guideThirdView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func premiumContainer(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.premiumContainer.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func screenContainer(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.screenContainer.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func secretChannelContainer(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.secretChannelContainer.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func snapChatCreativeShareView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.snapChatCreativeShareView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `SearchCell`.
    static let searchCell: Rswift.ReuseIdentifier<SearchCell> = Rswift.ReuseIdentifier(identifier: "SearchCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Guide`.
    static let guide = _R.storyboard.guide()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Guide", bundle: ...)`
    static func guide(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.guide)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 44 localization keys.
    struct localizable {
      /// en translation: %@ subscription is %@, it automatically renews unless turned off in Accounting Settings at least 24h before current period ends. Payment is charged to your iTunes Account, cancel any time.
      /// 
      /// Locales: en
      static let premiumSubscriptionDetailNormal = Rswift.StringResource(key: "premium.subscription.detail.normal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: 3 days free trial, then %@ / Year
      /// 
      /// Locales: en
      static let premiumTryTitleDes = Rswift.StringResource(key: "premium.try.title.des", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: After the free trial, %@ subscription is %@, it automatically renews unless turned off in Accounting Settings at least 24h before current period ends. Payment is charged to your iTunes Account, cancel any time.
      /// 
      /// Locales: en
      static let premiumSubscriptionDetailFree = Rswift.StringResource(key: "premium.subscription.detail.free", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: CHANNEL NAME
      /// 
      /// Locales: en
      static let inputPasscodeGlobalPlaceholder = Rswift.StringResource(key: "input.passcode.global.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en
      static let toastCancel = Rswift.StringResource(key: "toast.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Change theme automatically
      /// 
      /// Locales: en
      static let premiumPrivAutomatically = Rswift.StringResource(key: "premium.priv.automatically", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Channel does not exist
      /// 
      /// Locales: en
      static let channelNotExist = Rswift.StringResource(key: "channel.not.exist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Checking
      /// 
      /// Locales: en
      static let channelChecking = Rswift.StringResource(key: "channel.checking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Continue
      /// 
      /// Locales: en
      static let guideContinue = Rswift.StringResource(key: "guide.continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Copied
      /// 
      /// Locales: en
      static let copied = Rswift.StringResource(key: "copied", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create Global Channel
      /// 
      /// Locales: en
      static let addChannelGlobalTipsTitle = Rswift.StringResource(key: "add.channel.global.tips.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create a channel visible to everyone and chat with them
      /// 
      /// Locales: en
      static let addChannelGlobalTipsDes = Rswift.StringResource(key: "add.channel.global.tips.des", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create secret channel to chat with your friends
      /// 
      /// Locales: en
      static let addChannelSecretCreateTipsDes = Rswift.StringResource(key: "add.channel.secret.create.tips.des", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: ERROR MAX USERS
      /// 
      /// Locales: en
      static let channelUserMaxState = Rswift.StringResource(key: "channel.user.max.state", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Enter the Secret Channel?
      /// 
      /// Locales: en
      static let enterSecretChannelAlertTitle = Rswift.StringResource(key: "enter.secret.channel.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: GLOBAL
      /// 
      /// Locales: en
      static let addChannelGlobalTitle = Rswift.StringResource(key: "add.channel.global.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Join secret channel to chat with your friends
      /// 
      /// Locales: en
      static let addChannelSecretTipsDes = Rswift.StringResource(key: "add.channel.secret.tips.des", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: MAX
      /// 
      /// Locales: en
      static let channelUserMax = Rswift.StringResource(key: "channel.user.max", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No ad available, please try again later. 
      /// 
      /// Locales: en
      static let noAdAlert = Rswift.StringResource(key: "no.ad.alert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No purchases were found on your account
      /// 
      /// Locales: en
      static let settingsRestoreFailBody = Rswift.StringResource(key: "settings.restore.fail.body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en
      static let toastConfirm = Rswift.StringResource(key: "toast.confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ok
      /// 
      /// Locales: en
      static let alertOk = Rswift.StringResource(key: "alert.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: PASSCORD
      /// 
      /// Locales: en
      static let inputPasscodePlaceholder = Rswift.StringResource(key: "input.passcode.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Passcode does not exist
      /// 
      /// Locales: en
      static let privateErrorCode = Rswift.StringResource(key: "private.error.code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Purchase not found
      /// 
      /// Locales: en
      static let settingsRestoreFailTitle = Rswift.StringResource(key: "settings.restore.fail.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Remove ads
      /// 
      /// Locales: en
      static let premiumPrivAds = Rswift.StringResource(key: "premium.priv.ads", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Restore Purchase
      /// 
      /// Locales: en
      static let settingsRestoreTitle = Rswift.StringResource(key: "settings.restore.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: SECRET
      /// 
      /// Locales: en
      static let addChannelSecretTitle = Rswift.StringResource(key: "add.channel.secret.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: SKIP TRIAL
      /// 
      /// Locales: en
      static let premiumSkipTrial = Rswift.StringResource(key: "premium.skip.trial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en
      static let settingsTitle = Rswift.StringResource(key: "settings.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Subscribe
      /// 
      /// Locales: en
      static let guideSubscribeTitle = Rswift.StringResource(key: "guide.subscribe.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Subscription Terms:
      /// 
      /// Locales: en
      static let premiumSubscriptionTerms = Rswift.StringResource(key: "premium.subscription.terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: TRY IT FREE
      /// 
      /// Locales: en
      static let premiumFreeTrial = Rswift.StringResource(key: "premium.free.trial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: This passcode can enter a secret channel, enter now?
      /// 
      /// Locales: en
      static let enterSecretChannelAlertDesc = Rswift.StringResource(key: "enter.secret.channel.alert.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Try it FREE
      /// 
      /// Locales: en
      static let premiumTryTitle = Rswift.StringResource(key: "premium.try.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unlock all categories
      /// 
      /// Locales: en
      static let premiumPrivCategories = Rswift.StringResource(key: "premium.priv.categories", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unlock all themes
      /// 
      /// Locales: en
      static let premiumPrivThemes = Rswift.StringResource(key: "premium.priv.themes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unreachable networking!
      /// 
      /// Locales: en
      static let networkNotReachable = Rswift.StringResource(key: "network.not.reachable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You don't have any secret channel yet, create or join one
      /// 
      /// Locales: en
      static let addChannelSecretEmptyJoined = Rswift.StringResource(key: "add.channel.secret.empty.joined", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You only have one secret channel
      /// 
      /// Locales: en
      static let toastSingleSecretChannal = Rswift.StringResource(key: "toast.single.secret.channal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your passcode has no corresponding secret channel, create or join one 
      /// 
      /// Locales: en
      static let addChannelSecretErrorPasscode = Rswift.StringResource(key: "add.channel.secret.error.passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your secret channel is invalid, create or join one 👇👇👇
      /// 
      /// Locales: en
      static let addChannelSecretInvalid = Rswift.StringResource(key: "add.channel.secret.invalid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You’re all set
      /// 
      /// Locales: en
      static let settingsRestoreSuccessTitle = Rswift.StringResource(key: "settings.restore.success.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: your purchase was successful
      /// 
      /// Locales: en
      static let settingsRestoreSuccessBody = Rswift.StringResource(key: "settings.restore.success.body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: %@ subscription is %@, it automatically renews unless turned off in Accounting Settings at least 24h before current period ends. Payment is charged to your iTunes Account, cancel any time.
      /// 
      /// Locales: en
      static func premiumSubscriptionDetailNormal(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("premium.subscription.detail.normal", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: 3 days free trial, then %@ / Year
      /// 
      /// Locales: en
      static func premiumTryTitleDes(_ value1: String) -> String {
        return String(format: NSLocalizedString("premium.try.title.des", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: After the free trial, %@ subscription is %@, it automatically renews unless turned off in Accounting Settings at least 24h before current period ends. Payment is charged to your iTunes Account, cancel any time.
      /// 
      /// Locales: en
      static func premiumSubscriptionDetailFree(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("premium.subscription.detail.free", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: CHANNEL NAME
      /// 
      /// Locales: en
      static func inputPasscodeGlobalPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("input.passcode.global.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en
      static func toastCancel(_: Void = ()) -> String {
        return NSLocalizedString("toast.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Change theme automatically
      /// 
      /// Locales: en
      static func premiumPrivAutomatically(_: Void = ()) -> String {
        return NSLocalizedString("premium.priv.automatically", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Channel does not exist
      /// 
      /// Locales: en
      static func channelNotExist(_: Void = ()) -> String {
        return NSLocalizedString("channel.not.exist", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Checking
      /// 
      /// Locales: en
      static func channelChecking(_: Void = ()) -> String {
        return NSLocalizedString("channel.checking", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Continue
      /// 
      /// Locales: en
      static func guideContinue(_: Void = ()) -> String {
        return NSLocalizedString("guide.continue", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copied
      /// 
      /// Locales: en
      static func copied(_: Void = ()) -> String {
        return NSLocalizedString("copied", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create Global Channel
      /// 
      /// Locales: en
      static func addChannelGlobalTipsTitle(_: Void = ()) -> String {
        return NSLocalizedString("add.channel.global.tips.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create a channel visible to everyone and chat with them
      /// 
      /// Locales: en
      static func addChannelGlobalTipsDes(_: Void = ()) -> String {
        return NSLocalizedString("add.channel.global.tips.des", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create secret channel to chat with your friends
      /// 
      /// Locales: en
      static func addChannelSecretCreateTipsDes(_: Void = ()) -> String {
        return NSLocalizedString("add.channel.secret.create.tips.des", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ERROR MAX USERS
      /// 
      /// Locales: en
      static func channelUserMaxState(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.max.state", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter the Secret Channel?
      /// 
      /// Locales: en
      static func enterSecretChannelAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("enter.secret.channel.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: GLOBAL
      /// 
      /// Locales: en
      static func addChannelGlobalTitle(_: Void = ()) -> String {
        return NSLocalizedString("add.channel.global.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Join secret channel to chat with your friends
      /// 
      /// Locales: en
      static func addChannelSecretTipsDes(_: Void = ()) -> String {
        return NSLocalizedString("add.channel.secret.tips.des", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MAX
      /// 
      /// Locales: en
      static func channelUserMax(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.max", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No ad available, please try again later. 
      /// 
      /// Locales: en
      static func noAdAlert(_: Void = ()) -> String {
        return NSLocalizedString("no.ad.alert", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No purchases were found on your account
      /// 
      /// Locales: en
      static func settingsRestoreFailBody(_: Void = ()) -> String {
        return NSLocalizedString("settings.restore.fail.body", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en
      static func toastConfirm(_: Void = ()) -> String {
        return NSLocalizedString("toast.confirm", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ok
      /// 
      /// Locales: en
      static func alertOk(_: Void = ()) -> String {
        return NSLocalizedString("alert.ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PASSCORD
      /// 
      /// Locales: en
      static func inputPasscodePlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("input.passcode.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Passcode does not exist
      /// 
      /// Locales: en
      static func privateErrorCode(_: Void = ()) -> String {
        return NSLocalizedString("private.error.code", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Purchase not found
      /// 
      /// Locales: en
      static func settingsRestoreFailTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.restore.fail.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Remove ads
      /// 
      /// Locales: en
      static func premiumPrivAds(_: Void = ()) -> String {
        return NSLocalizedString("premium.priv.ads", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Restore Purchase
      /// 
      /// Locales: en
      static func settingsRestoreTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.restore.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SECRET
      /// 
      /// Locales: en
      static func addChannelSecretTitle(_: Void = ()) -> String {
        return NSLocalizedString("add.channel.secret.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SKIP TRIAL
      /// 
      /// Locales: en
      static func premiumSkipTrial(_: Void = ()) -> String {
        return NSLocalizedString("premium.skip.trial", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en
      static func settingsTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Subscribe
      /// 
      /// Locales: en
      static func guideSubscribeTitle(_: Void = ()) -> String {
        return NSLocalizedString("guide.subscribe.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Subscription Terms:
      /// 
      /// Locales: en
      static func premiumSubscriptionTerms(_: Void = ()) -> String {
        return NSLocalizedString("premium.subscription.terms", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: TRY IT FREE
      /// 
      /// Locales: en
      static func premiumFreeTrial(_: Void = ()) -> String {
        return NSLocalizedString("premium.free.trial", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This passcode can enter a secret channel, enter now?
      /// 
      /// Locales: en
      static func enterSecretChannelAlertDesc(_: Void = ()) -> String {
        return NSLocalizedString("enter.secret.channel.alert.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Try it FREE
      /// 
      /// Locales: en
      static func premiumTryTitle(_: Void = ()) -> String {
        return NSLocalizedString("premium.try.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unlock all categories
      /// 
      /// Locales: en
      static func premiumPrivCategories(_: Void = ()) -> String {
        return NSLocalizedString("premium.priv.categories", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unlock all themes
      /// 
      /// Locales: en
      static func premiumPrivThemes(_: Void = ()) -> String {
        return NSLocalizedString("premium.priv.themes", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unreachable networking!
      /// 
      /// Locales: en
      static func networkNotReachable(_: Void = ()) -> String {
        return NSLocalizedString("network.not.reachable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You don't have any secret channel yet, create or join one
      /// 
      /// Locales: en
      static func addChannelSecretEmptyJoined(_: Void = ()) -> String {
        return NSLocalizedString("add.channel.secret.empty.joined", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You only have one secret channel
      /// 
      /// Locales: en
      static func toastSingleSecretChannal(_: Void = ()) -> String {
        return NSLocalizedString("toast.single.secret.channal", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your passcode has no corresponding secret channel, create or join one 
      /// 
      /// Locales: en
      static func addChannelSecretErrorPasscode(_: Void = ()) -> String {
        return NSLocalizedString("add.channel.secret.error.passcode", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your secret channel is invalid, create or join one 👇👇👇
      /// 
      /// Locales: en
      static func addChannelSecretInvalid(_: Void = ()) -> String {
        return NSLocalizedString("add.channel.secret.invalid", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You’re all set
      /// 
      /// Locales: en
      static func settingsRestoreSuccessTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.restore.success.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: your purchase was successful
      /// 
      /// Locales: en
      static func settingsRestoreSuccessBody(_: Void = ()) -> String {
        return NSLocalizedString("settings.restore.success.body", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _GuideFirstView.validate()
      try _GuideFourthView.validate()
      try _GuideSecondView.validate()
      try _GuideThirdView.validate()
      try _PremiumContainer.validate()
      try _ScreenContainer.validate()
      try _SecretChannelContainer.validate()
      try _SnapChatCreativeShareView.validate()
    }
    
    struct _CreateGlobalChannelController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CreateGlobalChannelController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _CreateSecretChannelController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CreateSecretChannelController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _GlobalChannelContainer: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GlobalChannelContainer"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _GuideFirstView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GuideFirstView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_guide_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guide_1' is used in nib 'GuideFirstView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _GuideFourthView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GuideFourthView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_close_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close_gray' is used in nib 'GuideFourthView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_emoji_hh", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_emoji_hh' is used in nib 'GuideFourthView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_emoji_kiss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_emoji_kiss' is used in nib 'GuideFourthView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_guide_4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guide_4' is used in nib 'GuideFourthView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'GuideFourthView', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _GuideSecondView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GuideSecondView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_guide_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guide_2' is used in nib 'GuideSecondView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _GuideThirdView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GuideThirdView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_guide_3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guide_3' is used in nib 'GuideThirdView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PremiumContainer: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PremiumContainer"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close' is used in nib 'PremiumContainer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pro' is used in nib 'PremiumContainer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pro_persons", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pro_persons' is used in nib 'PremiumContainer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pro_select", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pro_select' is used in nib 'PremiumContainer', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'PremiumContainer', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ScreenContainer: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ScreenContainer"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_mic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_mic' is used in nib 'ScreenContainer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_room_lock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_room_lock' is used in nib 'ScreenContainer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_screen_bg_g_d_pdf", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_screen_bg_g_d_pdf' is used in nib 'ScreenContainer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_screen_bg_g_shadow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_screen_bg_g_shadow' is used in nib 'ScreenContainer', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SecretChannelContainer: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SecretChannelContainer"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_pri_ad", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pri_ad' is used in nib 'SecretChannelContainer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pri_join", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pri_join' is used in nib 'SecretChannelContainer', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SnapChatCreativeShareView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SnapChatCreativeShareView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "snapchat_share_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'snapchat_share_bg' is used in nib 'SnapChatCreativeShareView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try guide.validate()
      try launchScreen.validate()
      try main.validate()
    }
    
    struct guide: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let guideViewController = StoryboardViewControllerResource<GuideViewController>(identifier: "GuideViewController")
      let name = "Guide"
      
      func guideViewController(_: Void = ()) -> GuideViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: guideViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.guide().guideViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'guideViewController' could not be loaded from storyboard 'Guide' as 'GuideViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "launch_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "launch_name", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch_name' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NavigationViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      let premiumViewController = StoryboardViewControllerResource<PremiumViewController>(identifier: "PremiumViewController")
      let privateChannelController = StoryboardViewControllerResource<PrivateChannelController>(identifier: "PrivateChannelController")
      let privateShareController = StoryboardViewControllerResource<PrivateShareController>(identifier: "PrivateShareController")
      let pushSettingController = StoryboardViewControllerResource<PushSettingController>(identifier: "PushSettingController")
      let searchViewController = StoryboardViewControllerResource<SearchViewController>(identifier: "SearchViewController")
      let settingViewController = StoryboardViewControllerResource<SettingViewController>(identifier: "SettingViewController")
      
      func premiumViewController(_: Void = ()) -> PremiumViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: premiumViewController)
      }
      
      func privateChannelController(_: Void = ()) -> PrivateChannelController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: privateChannelController)
      }
      
      func privateShareController(_: Void = ()) -> PrivateShareController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: privateShareController)
      }
      
      func pushSettingController(_: Void = ()) -> PushSettingController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pushSettingController)
      }
      
      func searchViewController(_: Void = ()) -> SearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchViewController)
      }
      
      func settingViewController(_: Void = ()) -> SettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_add' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_call_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_call_on' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_down' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_power", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_power' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_private_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_private_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_share' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_up", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_up' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "home_btn_bg_b", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home_btn_bg_b' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "home_connect_btn_bg_b", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home_connect_btn_bg_b' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pri_ad", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pri_ad' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pri_join", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pri_join' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pro' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pro_persons", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pro_persons' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pro_select", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pro_select' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_push", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_push' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_room_lock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_room_lock' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_setting", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_setting' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_setting_diamonds_u", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_setting_diamonds_u' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_setting_star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_setting_star' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "speak_button_nor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'speak_button_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "speak_button_pre", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'speak_button_pre' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().premiumViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'premiumViewController' could not be loaded from storyboard 'Main' as 'PremiumViewController'.") }
        if _R.storyboard.main().privateChannelController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'privateChannelController' could not be loaded from storyboard 'Main' as 'PrivateChannelController'.") }
        if _R.storyboard.main().privateShareController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'privateShareController' could not be loaded from storyboard 'Main' as 'PrivateShareController'.") }
        if _R.storyboard.main().pushSettingController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pushSettingController' could not be loaded from storyboard 'Main' as 'PushSettingController'.") }
        if _R.storyboard.main().searchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchViewController' could not be loaded from storyboard 'Main' as 'SearchViewController'.") }
        if _R.storyboard.main().settingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingViewController' could not be loaded from storyboard 'Main' as 'SettingViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
