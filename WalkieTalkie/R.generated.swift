//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 7 files.
  struct file {
    /// Resource file `Adjust-Info.plist`.
    static let adjustInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Adjust-Info", pathExtension: "plist")
    /// Resource file `DefaultRemoteConfig.plist`.
    static let defaultRemoteConfigPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "DefaultRemoteConfig", pathExtension: "plist")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `SupportedLanguages.json`.
    static let supportedLanguagesJson = Rswift.FileResource(bundle: R.hostingBundle, name: "SupportedLanguages", pathExtension: "json")
    /// Resource file `emojis.json`.
    static let emojisJson = Rswift.FileResource(bundle: R.hostingBundle, name: "emojis", pathExtension: "json")
    /// Resource file `login_bg.svga`.
    static let login_bgSvga = Rswift.FileResource(bundle: R.hostingBundle, name: "login_bg", pathExtension: "svga")
    /// Resource file `mobileRegions.json`.
    static let mobileRegionsJson = Rswift.FileResource(bundle: R.hostingBundle, name: "mobileRegions", pathExtension: "json")
    
    /// `bundle.url(forResource: "Adjust-Info", withExtension: "plist")`
    static func adjustInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adjustInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "DefaultRemoteConfig", withExtension: "plist")`
    static func defaultRemoteConfigPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.defaultRemoteConfigPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SupportedLanguages", withExtension: "json")`
    static func supportedLanguagesJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.supportedLanguagesJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "emojis", withExtension: "json")`
    static func emojisJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.emojisJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "login_bg", withExtension: "svga")`
    static func login_bgSvga(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.login_bgSvga
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "mobileRegions", withExtension: "json")`
    static func mobileRegionsJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mobileRegionsJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 7 fonts.
  struct font: Rswift.Validatable {
    /// Font `Bungee-Regular`.
    static let bungeeRegular = Rswift.FontResource(fontName: "Bungee-Regular")
    /// Font `Nunito-Black`.
    static let nunitoBlack = Rswift.FontResource(fontName: "Nunito-Black")
    /// Font `Nunito-BoldItalic`.
    static let nunitoBoldItalic = Rswift.FontResource(fontName: "Nunito-BoldItalic")
    /// Font `Nunito-Bold`.
    static let nunitoBold = Rswift.FontResource(fontName: "Nunito-Bold")
    /// Font `Nunito-ExtraBold`.
    static let nunitoExtraBold = Rswift.FontResource(fontName: "Nunito-ExtraBold")
    /// Font `Nunito-Regular`.
    static let nunitoRegular = Rswift.FontResource(fontName: "Nunito-Regular")
    /// Font `Nunito-SemiBold`.
    static let nunitoSemiBold = Rswift.FontResource(fontName: "Nunito-SemiBold")
    
    /// `UIFont(name: "Bungee-Regular", size: ...)`
    static func bungeeRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: bungeeRegular, size: size)
    }
    
    /// `UIFont(name: "Nunito-Black", size: ...)`
    static func nunitoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoBlack, size: size)
    }
    
    /// `UIFont(name: "Nunito-Bold", size: ...)`
    static func nunitoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoBold, size: size)
    }
    
    /// `UIFont(name: "Nunito-BoldItalic", size: ...)`
    static func nunitoBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoBoldItalic, size: size)
    }
    
    /// `UIFont(name: "Nunito-ExtraBold", size: ...)`
    static func nunitoExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoExtraBold, size: size)
    }
    
    /// `UIFont(name: "Nunito-Regular", size: ...)`
    static func nunitoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoRegular, size: size)
    }
    
    /// `UIFont(name: "Nunito-SemiBold", size: ...)`
    static func nunitoSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoSemiBold, size: size)
    }
    
    static func validate() throws {
      if R.font.bungeeRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Bungee-Regular' could not be loaded, is 'Bungee-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-Black' could not be loaded, is 'Nunito-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-Bold' could not be loaded, is 'Nunito-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-BoldItalic' could not be loaded, is 'Nunito-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-ExtraBold' could not be loaded, is 'Nunito-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-Regular' could not be loaded, is 'Nunito-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-SemiBold' could not be loaded, is 'Nunito-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 137 images.
  struct image {
    /// Image `ac_among_no_data`.
    static let ac_among_no_data = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_among_no_data")
    /// Image `ac_among_no_search_result`.
    static let ac_among_no_search_result = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_among_no_search_result")
    /// Image `ac_animation_background`.
    static let ac_animation_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_animation_background")
    /// Image `ac_avatar_ad`.
    static let ac_avatar_ad = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_avatar_ad")
    /// Image `ac_avatar_selected`.
    static let ac_avatar_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_avatar_selected")
    /// Image `ac_avatar_unselected`.
    static let ac_avatar_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_avatar_unselected")
    /// Image `ac_back`.
    static let ac_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_back")
    /// Image `ac_channel_card_ad`.
    static let ac_channel_card_ad = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_channel_card_ad")
    /// Image `ac_create_room_bar_top_shadow`.
    static let ac_create_room_bar_top_shadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_create_room_bar_top_shadow")
    /// Image `ac_home_banner`.
    static let ac_home_banner = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_home_banner")
    /// Image `ac_home_create`.
    static let ac_home_create = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_home_create")
    /// Image `ac_home_friends_locked`.
    static let ac_home_friends_locked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_home_friends_locked")
    /// Image `ac_home_friends_tab`.
    static let ac_home_friends_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_home_friends_tab")
    /// Image `ac_home_invite`.
    static let ac_home_invite = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_home_invite")
    /// Image `ac_home_load_error`.
    static let ac_home_load_error = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_home_load_error")
    /// Image `ac_home_profile`.
    static let ac_home_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_home_profile")
    /// Image `ac_home_tab_shadow`.
    static let ac_home_tab_shadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_home_tab_shadow")
    /// Image `ac_home_topic_tab`.
    static let ac_home_topic_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_home_topic_tab")
    /// Image `ac_icon_kick_user`.
    static let ac_icon_kick_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_kick_user")
    /// Image `ac_icon_leave`.
    static let ac_icon_leave = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_leave")
    /// Image `ac_icon_mic_off`.
    static let ac_icon_mic_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_mic_off")
    /// Image `ac_icon_mic_on`.
    static let ac_icon_mic_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_mic_on")
    /// Image `ac_icon_minmize`.
    static let ac_icon_minmize = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_minmize")
    /// Image `ac_icon_not`.
    static let ac_icon_not = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_not")
    /// Image `ac_icon_room_disable_mic`.
    static let ac_icon_room_disable_mic = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_room_disable_mic")
    /// Image `ac_icon_room_report`.
    static let ac_icon_room_report = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_room_report")
    /// Image `ac_icon_seat_add`.
    static let ac_icon_seat_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_seat_add")
    /// Image `ac_icon_send_message`.
    static let ac_icon_send_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_send_message")
    /// Image `ac_icon_share`.
    static let ac_icon_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_icon_share")
    /// Image `ac_image_search`.
    static let ac_image_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_image_search")
    /// Image `ac_kick_selected`.
    static let ac_kick_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_kick_selected")
    /// Image `ac_login_apple`.
    static let ac_login_apple = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_login_apple")
    /// Image `ac_login_facebook`.
    static let ac_login_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_login_facebook")
    /// Image `ac_login_fireworks`.
    static let ac_login_fireworks = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_login_fireworks")
    /// Image `ac_login_google`.
    static let ac_login_google = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_login_google")
    /// Image `ac_login_logo`.
    static let ac_login_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_login_logo")
    /// Image `ac_login_mobile`.
    static let ac_login_mobile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_login_mobile")
    /// Image `ac_login_sms`.
    static let ac_login_sms = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_login_sms")
    /// Image `ac_login_snapchat`.
    static let ac_login_snapchat = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_login_snapchat")
    /// Image `ac_login_start`.
    static let ac_login_start = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_login_start")
    /// Image `ac_login_top_bg`.
    static let ac_login_top_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_login_top_bg")
    /// Image `ac_login_wrong_code_bubble`.
    static let ac_login_wrong_code_bubble = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_login_wrong_code_bubble")
    /// Image `ac_login_wrong_emoji`.
    static let ac_login_wrong_emoji = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_login_wrong_emoji")
    /// Image `ac_profile_avatar`.
    static let ac_profile_avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_profile_avatar")
    /// Image `ac_profile_birthday`.
    static let ac_profile_birthday = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_profile_birthday")
    /// Image `ac_profile_block`.
    static let ac_profile_block = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_profile_block")
    /// Image `ac_profile_close_down`.
    static let ac_profile_close_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_profile_close_down")
    /// Image `ac_profile_close`.
    static let ac_profile_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_profile_close")
    /// Image `ac_profile_communtiy`.
    static let ac_profile_communtiy = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_profile_communtiy")
    /// Image `ac_profile_edit`.
    static let ac_profile_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_profile_edit")
    /// Image `ac_profile_more_icon`.
    static let ac_profile_more_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_profile_more_icon")
    /// Image `ac_profile_username`.
    static let ac_profile_username = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_profile_username")
    /// Image `ac_rate_us`.
    static let ac_rate_us = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_rate_us")
    /// Image `ac_red_dot`.
    static let ac_red_dot = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_red_dot")
    /// Image `ac_right_arrow`.
    static let ac_right_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_right_arrow")
    /// Image `ac_room_card2`.
    static let ac_room_card2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_room_card2")
    /// Image `ac_room_card`.
    static let ac_room_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_room_card")
    /// Image `ac_room_copylink`.
    static let ac_room_copylink = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_room_copylink")
    /// Image `ac_room_share`.
    static let ac_room_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_room_share")
    /// Image `ac_set_birthday_birthday`.
    static let ac_set_birthday_birthday = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_set_birthday_birthday")
    /// Image `ac_setting_check`.
    static let ac_setting_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_setting_check")
    /// Image `ac_setting_diamonds`.
    static let ac_setting_diamonds = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_setting_diamonds")
    /// Image `ac_setting_region`.
    static let ac_setting_region = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_setting_region")
    /// Image `ac_share_app`.
    static let ac_share_app = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_share_app")
    /// Image `ac_social_tiktok`.
    static let ac_social_tiktok = Rswift.ImageResource(bundle: R.hostingBundle, name: "ac_social_tiktok")
    /// Image `backNor`.
    static let backNor = Rswift.ImageResource(bundle: R.hostingBundle, name: "backNor")
    /// Image `btn_add`.
    static let btn_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_add")
    /// Image `btn_call_off`.
    static let btn_call_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_call_off")
    /// Image `btn_call_on`.
    static let btn_call_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_call_on")
    /// Image `btn_down`.
    static let btn_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_down")
    /// Image `btn_more_action`.
    static let btn_more_action = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_more_action")
    /// Image `btn_power_on`.
    static let btn_power_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_power_on")
    /// Image `btn_power`.
    static let btn_power = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_power")
    /// Image `btn_private_icon`.
    static let btn_private_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_private_icon")
    /// Image `btn_private_small`.
    static let btn_private_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_private_small")
    /// Image `btn_room_copy`.
    static let btn_room_copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_room_copy")
    /// Image `btn_room_message`.
    static let btn_room_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_room_message")
    /// Image `btn_room_share`.
    static let btn_room_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_room_share")
    /// Image `btn_share`.
    static let btn_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_share")
    /// Image `btn_up`.
    static let btn_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_up")
    /// Image `channel_user_list_block`.
    static let channel_user_list_block = Rswift.ImageResource(bundle: R.hostingBundle, name: "channel_user_list_block")
    /// Image `channel_user_list_ear`.
    static let channel_user_list_ear = Rswift.ImageResource(bundle: R.hostingBundle, name: "channel_user_list_ear")
    /// Image `channel_user_list_followed`.
    static let channel_user_list_followed = Rswift.ImageResource(bundle: R.hostingBundle, name: "channel_user_list_followed")
    /// Image `channel_user_list_mic`.
    static let channel_user_list_mic = Rswift.ImageResource(bundle: R.hostingBundle, name: "channel_user_list_mic")
    /// Image `channel_user_list_mute`.
    static let channel_user_list_mute = Rswift.ImageResource(bundle: R.hostingBundle, name: "channel_user_list_mute")
    /// Image `channel_user_list_social`.
    static let channel_user_list_social = Rswift.ImageResource(bundle: R.hostingBundle, name: "channel_user_list_social")
    /// Image `default_avatar_0`.
    static let default_avatar_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "default_avatar_0")
    /// Image `default_avatar_1`.
    static let default_avatar_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "default_avatar_1")
    /// Image `default_avatar_2`.
    static let default_avatar_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "default_avatar_2")
    /// Image `default_avatar_3`.
    static let default_avatar_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "default_avatar_3")
    /// Image `default_avatar_4`.
    static let default_avatar_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "default_avatar_4")
    /// Image `default_avatar_5`.
    static let default_avatar_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "default_avatar_5")
    /// Image `home_btn_bg_b`.
    static let home_btn_bg_b = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_btn_bg_b")
    /// Image `home_btn_bg`.
    static let home_btn_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_btn_bg")
    /// Image `home_connect_btn_bg_b`.
    static let home_connect_btn_bg_b = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_connect_btn_bg_b")
    /// Image `home_name_edit`.
    static let home_name_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_name_edit")
    /// Image `iconReport`.
    static let iconReport = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconReport")
    /// Image `icon_close_gray`.
    static let icon_close_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close_gray")
    /// Image `icon_close`.
    static let icon_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close")
    /// Image `icon_emoji_hh`.
    static let icon_emoji_hh = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_emoji_hh")
    /// Image `icon_emoji_kiss`.
    static let icon_emoji_kiss = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_emoji_kiss")
    /// Image `icon_guide_1`.
    static let icon_guide_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guide_1")
    /// Image `icon_guide_2`.
    static let icon_guide_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guide_2")
    /// Image `icon_guide_3`.
    static let icon_guide_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guide_3")
    /// Image `icon_guide_4_b`.
    static let icon_guide_4_b = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guide_4_b")
    /// Image `icon_guide_4`.
    static let icon_guide_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guide_4")
    /// Image `icon_mic_disable`.
    static let icon_mic_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mic_disable")
    /// Image `icon_mic`.
    static let icon_mic = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mic")
    /// Image `icon_pri_ad`.
    static let icon_pri_ad = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pri_ad")
    /// Image `icon_pri_join`.
    static let icon_pri_join = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pri_join")
    /// Image `icon_pro_persons`.
    static let icon_pro_persons = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pro_persons")
    /// Image `icon_pro_select_y`.
    static let icon_pro_select_y = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pro_select_y")
    /// Image `icon_pro_select`.
    static let icon_pro_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pro_select")
    /// Image `icon_pro_y`.
    static let icon_pro_y = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pro_y")
    /// Image `icon_pro`.
    static let icon_pro = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pro")
    /// Image `icon_push`.
    static let icon_push = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_push")
    /// Image `icon_room_lock`.
    static let icon_room_lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_room_lock")
    /// Image `icon_setting_diamonds`.
    static let icon_setting_diamonds = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting_diamonds")
    /// Image `icon_setting_star`.
    static let icon_setting_star = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting_star")
    /// Image `icon_setting`.
    static let icon_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting")
    /// Image `icon_share_bg`.
    static let icon_share_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_bg")
    /// Image `icon_share_message`.
    static let icon_share_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_message")
    /// Image `icon_share_more`.
    static let icon_share_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_more")
    /// Image `icon_share_snapchat`.
    static let icon_share_snapchat = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_snapchat")
    /// Image `icon_share_ticktock`.
    static let icon_share_ticktock = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_ticktock")
    /// Image `icon_share_whatsapp`.
    static let icon_share_whatsapp = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_whatsapp")
    /// Image `icon_user_list_mic_block`.
    static let icon_user_list_mic_block = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_user_list_mic_block")
    /// Image `icon_user_list_mic`.
    static let icon_user_list_mic = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_user_list_mic")
    /// Image `launch_logo`.
    static let launch_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_logo")
    /// Image `launch_name`.
    static let launch_name = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_name")
    /// Image `logo_snapchat`.
    static let logo_snapchat = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_snapchat")
    /// Image `profile_avatar_random_btn`.
    static let profile_avatar_random_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_avatar_random_btn")
    /// Image `profile_block_users`.
    static let profile_block_users = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_block_users")
    /// Image `profile_invite_friends`.
    static let profile_invite_friends = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_invite_friends")
    /// Image `profile_settings`.
    static let profile_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_settings")
    /// Image `spark`.
    static let spark = Rswift.ImageResource(bundle: R.hostingBundle, name: "spark")
    /// Image `star_bg`.
    static let star_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "star_bg")
    
    /// `UIImage(named: "ac_among_no_data", bundle: ..., traitCollection: ...)`
    static func ac_among_no_data(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_among_no_data, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_among_no_search_result", bundle: ..., traitCollection: ...)`
    static func ac_among_no_search_result(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_among_no_search_result, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_animation_background", bundle: ..., traitCollection: ...)`
    static func ac_animation_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_animation_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_avatar_ad", bundle: ..., traitCollection: ...)`
    static func ac_avatar_ad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_avatar_ad, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_avatar_selected", bundle: ..., traitCollection: ...)`
    static func ac_avatar_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_avatar_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_avatar_unselected", bundle: ..., traitCollection: ...)`
    static func ac_avatar_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_avatar_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_back", bundle: ..., traitCollection: ...)`
    static func ac_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_channel_card_ad", bundle: ..., traitCollection: ...)`
    static func ac_channel_card_ad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_channel_card_ad, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_create_room_bar_top_shadow", bundle: ..., traitCollection: ...)`
    static func ac_create_room_bar_top_shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_create_room_bar_top_shadow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_home_banner", bundle: ..., traitCollection: ...)`
    static func ac_home_banner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_home_banner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_home_create", bundle: ..., traitCollection: ...)`
    static func ac_home_create(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_home_create, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_home_friends_locked", bundle: ..., traitCollection: ...)`
    static func ac_home_friends_locked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_home_friends_locked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_home_friends_tab", bundle: ..., traitCollection: ...)`
    static func ac_home_friends_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_home_friends_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_home_invite", bundle: ..., traitCollection: ...)`
    static func ac_home_invite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_home_invite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_home_load_error", bundle: ..., traitCollection: ...)`
    static func ac_home_load_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_home_load_error, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_home_profile", bundle: ..., traitCollection: ...)`
    static func ac_home_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_home_profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_home_tab_shadow", bundle: ..., traitCollection: ...)`
    static func ac_home_tab_shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_home_tab_shadow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_home_topic_tab", bundle: ..., traitCollection: ...)`
    static func ac_home_topic_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_home_topic_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_kick_user", bundle: ..., traitCollection: ...)`
    static func ac_icon_kick_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_kick_user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_leave", bundle: ..., traitCollection: ...)`
    static func ac_icon_leave(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_leave, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_mic_off", bundle: ..., traitCollection: ...)`
    static func ac_icon_mic_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_mic_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_mic_on", bundle: ..., traitCollection: ...)`
    static func ac_icon_mic_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_mic_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_minmize", bundle: ..., traitCollection: ...)`
    static func ac_icon_minmize(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_minmize, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_not", bundle: ..., traitCollection: ...)`
    static func ac_icon_not(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_not, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_room_disable_mic", bundle: ..., traitCollection: ...)`
    static func ac_icon_room_disable_mic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_room_disable_mic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_room_report", bundle: ..., traitCollection: ...)`
    static func ac_icon_room_report(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_room_report, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_seat_add", bundle: ..., traitCollection: ...)`
    static func ac_icon_seat_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_seat_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_send_message", bundle: ..., traitCollection: ...)`
    static func ac_icon_send_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_send_message, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_icon_share", bundle: ..., traitCollection: ...)`
    static func ac_icon_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_icon_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_image_search", bundle: ..., traitCollection: ...)`
    static func ac_image_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_image_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_kick_selected", bundle: ..., traitCollection: ...)`
    static func ac_kick_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_kick_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_login_apple", bundle: ..., traitCollection: ...)`
    static func ac_login_apple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_login_apple, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_login_facebook", bundle: ..., traitCollection: ...)`
    static func ac_login_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_login_facebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_login_fireworks", bundle: ..., traitCollection: ...)`
    static func ac_login_fireworks(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_login_fireworks, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_login_google", bundle: ..., traitCollection: ...)`
    static func ac_login_google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_login_google, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_login_logo", bundle: ..., traitCollection: ...)`
    static func ac_login_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_login_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_login_mobile", bundle: ..., traitCollection: ...)`
    static func ac_login_mobile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_login_mobile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_login_sms", bundle: ..., traitCollection: ...)`
    static func ac_login_sms(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_login_sms, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_login_snapchat", bundle: ..., traitCollection: ...)`
    static func ac_login_snapchat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_login_snapchat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_login_start", bundle: ..., traitCollection: ...)`
    static func ac_login_start(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_login_start, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_login_top_bg", bundle: ..., traitCollection: ...)`
    static func ac_login_top_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_login_top_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_login_wrong_code_bubble", bundle: ..., traitCollection: ...)`
    static func ac_login_wrong_code_bubble(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_login_wrong_code_bubble, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_login_wrong_emoji", bundle: ..., traitCollection: ...)`
    static func ac_login_wrong_emoji(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_login_wrong_emoji, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_profile_avatar", bundle: ..., traitCollection: ...)`
    static func ac_profile_avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_profile_avatar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_profile_birthday", bundle: ..., traitCollection: ...)`
    static func ac_profile_birthday(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_profile_birthday, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_profile_block", bundle: ..., traitCollection: ...)`
    static func ac_profile_block(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_profile_block, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_profile_close", bundle: ..., traitCollection: ...)`
    static func ac_profile_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_profile_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_profile_close_down", bundle: ..., traitCollection: ...)`
    static func ac_profile_close_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_profile_close_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_profile_communtiy", bundle: ..., traitCollection: ...)`
    static func ac_profile_communtiy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_profile_communtiy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_profile_edit", bundle: ..., traitCollection: ...)`
    static func ac_profile_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_profile_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_profile_more_icon", bundle: ..., traitCollection: ...)`
    static func ac_profile_more_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_profile_more_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_profile_username", bundle: ..., traitCollection: ...)`
    static func ac_profile_username(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_profile_username, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_rate_us", bundle: ..., traitCollection: ...)`
    static func ac_rate_us(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_rate_us, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_red_dot", bundle: ..., traitCollection: ...)`
    static func ac_red_dot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_red_dot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_right_arrow", bundle: ..., traitCollection: ...)`
    static func ac_right_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_right_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_room_card", bundle: ..., traitCollection: ...)`
    static func ac_room_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_room_card, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_room_card2", bundle: ..., traitCollection: ...)`
    static func ac_room_card2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_room_card2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_room_copylink", bundle: ..., traitCollection: ...)`
    static func ac_room_copylink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_room_copylink, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_room_share", bundle: ..., traitCollection: ...)`
    static func ac_room_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_room_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_set_birthday_birthday", bundle: ..., traitCollection: ...)`
    static func ac_set_birthday_birthday(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_set_birthday_birthday, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_setting_check", bundle: ..., traitCollection: ...)`
    static func ac_setting_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_setting_check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_setting_diamonds", bundle: ..., traitCollection: ...)`
    static func ac_setting_diamonds(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_setting_diamonds, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_setting_region", bundle: ..., traitCollection: ...)`
    static func ac_setting_region(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_setting_region, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_share_app", bundle: ..., traitCollection: ...)`
    static func ac_share_app(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_share_app, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ac_social_tiktok", bundle: ..., traitCollection: ...)`
    static func ac_social_tiktok(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ac_social_tiktok, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backNor", bundle: ..., traitCollection: ...)`
    static func backNor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backNor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_add", bundle: ..., traitCollection: ...)`
    static func btn_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_call_off", bundle: ..., traitCollection: ...)`
    static func btn_call_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_call_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_call_on", bundle: ..., traitCollection: ...)`
    static func btn_call_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_call_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_down", bundle: ..., traitCollection: ...)`
    static func btn_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_more_action", bundle: ..., traitCollection: ...)`
    static func btn_more_action(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_more_action, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_power", bundle: ..., traitCollection: ...)`
    static func btn_power(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_power, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_power_on", bundle: ..., traitCollection: ...)`
    static func btn_power_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_power_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_private_icon", bundle: ..., traitCollection: ...)`
    static func btn_private_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_private_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_private_small", bundle: ..., traitCollection: ...)`
    static func btn_private_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_private_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_room_copy", bundle: ..., traitCollection: ...)`
    static func btn_room_copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_room_copy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_room_message", bundle: ..., traitCollection: ...)`
    static func btn_room_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_room_message, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_room_share", bundle: ..., traitCollection: ...)`
    static func btn_room_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_room_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_share", bundle: ..., traitCollection: ...)`
    static func btn_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_up", bundle: ..., traitCollection: ...)`
    static func btn_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "channel_user_list_block", bundle: ..., traitCollection: ...)`
    static func channel_user_list_block(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.channel_user_list_block, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "channel_user_list_ear", bundle: ..., traitCollection: ...)`
    static func channel_user_list_ear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.channel_user_list_ear, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "channel_user_list_followed", bundle: ..., traitCollection: ...)`
    static func channel_user_list_followed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.channel_user_list_followed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "channel_user_list_mic", bundle: ..., traitCollection: ...)`
    static func channel_user_list_mic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.channel_user_list_mic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "channel_user_list_mute", bundle: ..., traitCollection: ...)`
    static func channel_user_list_mute(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.channel_user_list_mute, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "channel_user_list_social", bundle: ..., traitCollection: ...)`
    static func channel_user_list_social(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.channel_user_list_social, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default_avatar_0", bundle: ..., traitCollection: ...)`
    static func default_avatar_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_avatar_0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default_avatar_1", bundle: ..., traitCollection: ...)`
    static func default_avatar_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_avatar_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default_avatar_2", bundle: ..., traitCollection: ...)`
    static func default_avatar_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_avatar_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default_avatar_3", bundle: ..., traitCollection: ...)`
    static func default_avatar_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_avatar_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default_avatar_4", bundle: ..., traitCollection: ...)`
    static func default_avatar_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_avatar_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default_avatar_5", bundle: ..., traitCollection: ...)`
    static func default_avatar_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_avatar_5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_btn_bg", bundle: ..., traitCollection: ...)`
    static func home_btn_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_btn_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_btn_bg_b", bundle: ..., traitCollection: ...)`
    static func home_btn_bg_b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_btn_bg_b, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_connect_btn_bg_b", bundle: ..., traitCollection: ...)`
    static func home_connect_btn_bg_b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_connect_btn_bg_b, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_name_edit", bundle: ..., traitCollection: ...)`
    static func home_name_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_name_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "iconReport", bundle: ..., traitCollection: ...)`
    static func iconReport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconReport, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_close", bundle: ..., traitCollection: ...)`
    static func icon_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_close_gray", bundle: ..., traitCollection: ...)`
    static func icon_close_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_emoji_hh", bundle: ..., traitCollection: ...)`
    static func icon_emoji_hh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_emoji_hh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_emoji_kiss", bundle: ..., traitCollection: ...)`
    static func icon_emoji_kiss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_emoji_kiss, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_guide_1", bundle: ..., traitCollection: ...)`
    static func icon_guide_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guide_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_guide_2", bundle: ..., traitCollection: ...)`
    static func icon_guide_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guide_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_guide_3", bundle: ..., traitCollection: ...)`
    static func icon_guide_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guide_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_guide_4", bundle: ..., traitCollection: ...)`
    static func icon_guide_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guide_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_guide_4_b", bundle: ..., traitCollection: ...)`
    static func icon_guide_4_b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guide_4_b, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_mic", bundle: ..., traitCollection: ...)`
    static func icon_mic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_mic_disable", bundle: ..., traitCollection: ...)`
    static func icon_mic_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mic_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pri_ad", bundle: ..., traitCollection: ...)`
    static func icon_pri_ad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pri_ad, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pri_join", bundle: ..., traitCollection: ...)`
    static func icon_pri_join(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pri_join, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pro", bundle: ..., traitCollection: ...)`
    static func icon_pro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pro, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pro_persons", bundle: ..., traitCollection: ...)`
    static func icon_pro_persons(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pro_persons, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pro_select", bundle: ..., traitCollection: ...)`
    static func icon_pro_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pro_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pro_select_y", bundle: ..., traitCollection: ...)`
    static func icon_pro_select_y(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pro_select_y, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pro_y", bundle: ..., traitCollection: ...)`
    static func icon_pro_y(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pro_y, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_push", bundle: ..., traitCollection: ...)`
    static func icon_push(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_push, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_room_lock", bundle: ..., traitCollection: ...)`
    static func icon_room_lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_room_lock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting", bundle: ..., traitCollection: ...)`
    static func icon_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting_diamonds", bundle: ..., traitCollection: ...)`
    static func icon_setting_diamonds(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting_diamonds, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting_star", bundle: ..., traitCollection: ...)`
    static func icon_setting_star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting_star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_share_bg", bundle: ..., traitCollection: ...)`
    static func icon_share_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_share_message", bundle: ..., traitCollection: ...)`
    static func icon_share_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_message, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_share_more", bundle: ..., traitCollection: ...)`
    static func icon_share_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_share_snapchat", bundle: ..., traitCollection: ...)`
    static func icon_share_snapchat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_snapchat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_share_ticktock", bundle: ..., traitCollection: ...)`
    static func icon_share_ticktock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_ticktock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_share_whatsapp", bundle: ..., traitCollection: ...)`
    static func icon_share_whatsapp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_whatsapp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_user_list_mic", bundle: ..., traitCollection: ...)`
    static func icon_user_list_mic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_user_list_mic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_user_list_mic_block", bundle: ..., traitCollection: ...)`
    static func icon_user_list_mic_block(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_user_list_mic_block, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch_logo", bundle: ..., traitCollection: ...)`
    static func launch_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch_name", bundle: ..., traitCollection: ...)`
    static func launch_name(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_name, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_snapchat", bundle: ..., traitCollection: ...)`
    static func logo_snapchat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_snapchat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile_avatar_random_btn", bundle: ..., traitCollection: ...)`
    static func profile_avatar_random_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_avatar_random_btn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile_block_users", bundle: ..., traitCollection: ...)`
    static func profile_block_users(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_block_users, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile_invite_friends", bundle: ..., traitCollection: ...)`
    static func profile_invite_friends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_invite_friends, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile_settings", bundle: ..., traitCollection: ...)`
    static func profile_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "spark", bundle: ..., traitCollection: ...)`
    static func spark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.spark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star_bg", bundle: ..., traitCollection: ...)`
    static func star_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_bg, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 24 nibs.
  struct nib {
    /// Nib `AmongChatRoomConfigView`.
    static let amongChatRoomConfigView = _R.nib._AmongChatRoomConfigView()
    /// Nib `AmongChatRoomTopBar`.
    static let amongChatRoomTopBar = _R.nib._AmongChatRoomTopBar()
    /// Nib `AmongInputCodeView`.
    static let amongInputCodeView = _R.nib._AmongInputCodeView()
    /// Nib `AmongInputNickNameView`.
    static let amongInputNickNameView = _R.nib._AmongInputNickNameView()
    /// Nib `AmongInputNotesView`.
    static let amongInputNotesView = _R.nib._AmongInputNotesView()
    /// Nib `AmongRoomBottomBar`.
    static let amongRoomBottomBar = _R.nib._AmongRoomBottomBar()
    /// Nib `AmongRoomInfoSetupView`.
    static let amongRoomInfoSetupView = _R.nib._AmongRoomInfoSetupView()
    /// Nib `AmongRoomInfoView`.
    static let amongRoomInfoView = _R.nib._AmongRoomInfoView()
    /// Nib `AmongRoomToolView`.
    static let amongRoomToolView = _R.nib._AmongRoomToolView()
    /// Nib `AmongSheetController`.
    static let amongSheetController = _R.nib._AmongSheetController()
    /// Nib `AmongSheetIconItemCell`.
    static let amongSheetIconItemCell = _R.nib._AmongSheetIconItemCell()
    /// Nib `AmongSheetUserCell`.
    static let amongSheetUserCell = _R.nib._AmongSheetUserCell()
    /// Nib `EndUserLicenseController`.
    static let endUserLicenseController = _R.nib._EndUserLicenseController()
    /// Nib `GuideFirstView`.
    static let guideFirstView = _R.nib._GuideFirstView()
    /// Nib `GuideFourthView_b`.
    static let guideFourthView_b = _R.nib._GuideFourthView_b()
    /// Nib `GuideFourthView`.
    static let guideFourthView = _R.nib._GuideFourthView()
    /// Nib `GuideSecondView`.
    static let guideSecondView = _R.nib._GuideSecondView()
    /// Nib `GuideThirdView`.
    static let guideThirdView = _R.nib._GuideThirdView()
    /// Nib `JustChillingInfoView`.
    static let justChillingInfoView = _R.nib._JustChillingInfoView()
    /// Nib `PremiumContainer`.
    static let premiumContainer = _R.nib._PremiumContainer()
    /// Nib `ShareContainerView`.
    static let shareContainerView = _R.nib._ShareContainerView()
    /// Nib `SnapChatCreativeShareView`.
    static let snapChatCreativeShareView = _R.nib._SnapChatCreativeShareView()
    /// Nib `SocialTiktokItemView`.
    static let socialTiktokItemView = _R.nib._SocialTiktokItemView()
    /// Nib `TikTokShareView`.
    static let tikTokShareView = _R.nib._TikTokShareView()
    
    /// `UINib(name: "AmongChatRoomConfigView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongChatRoomConfigView) instead")
    static func amongChatRoomConfigView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongChatRoomConfigView)
    }
    
    /// `UINib(name: "AmongChatRoomTopBar", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongChatRoomTopBar) instead")
    static func amongChatRoomTopBar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongChatRoomTopBar)
    }
    
    /// `UINib(name: "AmongInputCodeView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongInputCodeView) instead")
    static func amongInputCodeView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongInputCodeView)
    }
    
    /// `UINib(name: "AmongInputNickNameView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongInputNickNameView) instead")
    static func amongInputNickNameView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongInputNickNameView)
    }
    
    /// `UINib(name: "AmongInputNotesView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongInputNotesView) instead")
    static func amongInputNotesView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongInputNotesView)
    }
    
    /// `UINib(name: "AmongRoomBottomBar", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongRoomBottomBar) instead")
    static func amongRoomBottomBar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongRoomBottomBar)
    }
    
    /// `UINib(name: "AmongRoomInfoSetupView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongRoomInfoSetupView) instead")
    static func amongRoomInfoSetupView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongRoomInfoSetupView)
    }
    
    /// `UINib(name: "AmongRoomInfoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongRoomInfoView) instead")
    static func amongRoomInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongRoomInfoView)
    }
    
    /// `UINib(name: "AmongRoomToolView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongRoomToolView) instead")
    static func amongRoomToolView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongRoomToolView)
    }
    
    /// `UINib(name: "AmongSheetController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongSheetController) instead")
    static func amongSheetController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongSheetController)
    }
    
    /// `UINib(name: "AmongSheetIconItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongSheetIconItemCell) instead")
    static func amongSheetIconItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongSheetIconItemCell)
    }
    
    /// `UINib(name: "AmongSheetUserCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amongSheetUserCell) instead")
    static func amongSheetUserCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amongSheetUserCell)
    }
    
    /// `UINib(name: "EndUserLicenseController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.endUserLicenseController) instead")
    static func endUserLicenseController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.endUserLicenseController)
    }
    
    /// `UINib(name: "GuideFirstView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideFirstView) instead")
    static func guideFirstView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideFirstView)
    }
    
    /// `UINib(name: "GuideFourthView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideFourthView) instead")
    static func guideFourthView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideFourthView)
    }
    
    /// `UINib(name: "GuideFourthView_b", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideFourthView_b) instead")
    static func guideFourthView_b(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideFourthView_b)
    }
    
    /// `UINib(name: "GuideSecondView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideSecondView) instead")
    static func guideSecondView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideSecondView)
    }
    
    /// `UINib(name: "GuideThirdView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.guideThirdView) instead")
    static func guideThirdView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.guideThirdView)
    }
    
    /// `UINib(name: "JustChillingInfoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.justChillingInfoView) instead")
    static func justChillingInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.justChillingInfoView)
    }
    
    /// `UINib(name: "PremiumContainer", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.premiumContainer) instead")
    static func premiumContainer(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.premiumContainer)
    }
    
    /// `UINib(name: "ShareContainerView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.shareContainerView) instead")
    static func shareContainerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shareContainerView)
    }
    
    /// `UINib(name: "SnapChatCreativeShareView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.snapChatCreativeShareView) instead")
    static func snapChatCreativeShareView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.snapChatCreativeShareView)
    }
    
    /// `UINib(name: "SocialTiktokItemView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.socialTiktokItemView) instead")
    static func socialTiktokItemView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.socialTiktokItemView)
    }
    
    /// `UINib(name: "TikTokShareView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tikTokShareView) instead")
    static func tikTokShareView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tikTokShareView)
    }
    
    static func amongChatRoomConfigView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongChatRoomConfigView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongChatRoomTopBar(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongChatRoomTopBar.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongInputCodeView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongInputCodeView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongInputNickNameView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongInputNickNameView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongInputNotesView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongInputNotesView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongRoomBottomBar(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongRoomBottomBar.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongRoomInfoSetupView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongRoomInfoSetupView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongRoomInfoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongRoomInfoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongRoomToolView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongRoomToolView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongSheetController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.amongSheetController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func amongSheetIconItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AmongSheetIconItemCell? {
      return R.nib.amongSheetIconItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AmongSheetIconItemCell
    }
    
    static func amongSheetUserCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AmongSheetUserCell? {
      return R.nib.amongSheetUserCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AmongSheetUserCell
    }
    
    static func endUserLicenseController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.endUserLicenseController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func guideFirstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.guideFirstView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func guideFourthView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.guideFourthView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func guideFourthView_b(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.guideFourthView_b.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func guideSecondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.guideSecondView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func guideThirdView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.guideThirdView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func justChillingInfoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.justChillingInfoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func premiumContainer(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.premiumContainer.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func shareContainerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.shareContainerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func snapChatCreativeShareView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.snapChatCreativeShareView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func socialTiktokItemView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.socialTiktokItemView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func tikTokShareView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.tikTokShareView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AmongSheetIconItemCell`.
    static let amongSheetIconItemCell: Rswift.ReuseIdentifier<AmongSheetIconItemCell> = Rswift.ReuseIdentifier(identifier: "AmongSheetIconItemCell")
    /// Reuse identifier `AmongSheetUserCell`.
    static let amongSheetUserCell: Rswift.ReuseIdentifier<AmongSheetUserCell> = Rswift.ReuseIdentifier(identifier: "AmongSheetUserCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Guide`.
    static let guide = _R.storyboard.guide()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Guide", bundle: ...)`
    static func guide(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.guide)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.infoplist` struct is generated, and contains static references to 3 localization keys.
    struct infoplist {
      /// en translation: Enable microphone to talk to others in channels
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let nsMicrophoneUsageDescription = Rswift.StringResource(key: "NSMicrophoneUsageDescription", tableName: "Infoplist", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Please allow Among Chat to use your photo library
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let nsPhotoLibraryUsageDescription = Rswift.StringResource(key: "NSPhotoLibraryUsageDescription", tableName: "Infoplist", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Please allow Among Chat to use your speech recognition
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let nsSpeechRecognitionUsageDescription = Rswift.StringResource(key: "NSSpeechRecognitionUsageDescription", tableName: "Infoplist", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      
      /// en translation: Enable microphone to talk to others in channels
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func nsMicrophoneUsageDescription(_: Void = ()) -> String {
        return NSLocalizedString("NSMicrophoneUsageDescription", tableName: "Infoplist", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please allow Among Chat to use your photo library
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func nsPhotoLibraryUsageDescription(_: Void = ()) -> String {
        return NSLocalizedString("NSPhotoLibraryUsageDescription", tableName: "Infoplist", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please allow Among Chat to use your speech recognition
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func nsSpeechRecognitionUsageDescription(_: Void = ()) -> String {
        return NSLocalizedString("NSSpeechRecognitionUsageDescription", tableName: "Infoplist", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 215 localization keys.
    struct localizable {
      /// en translation:  Congratulations!
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginCongrat = Rswift.StringResource(key: "among.chat.login.congrat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: %1$@ online
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatHomeNowplaying = Rswift.StringResource(key: "among.chat.home.nowplaying", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: %@ subscription is %@, it automatically renews unless turned off in Accounting Settings at least 24h before current period ends. Payment is charged to your iTunes Account, cancel any time.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let premiumSubscriptionDetailNormal = Rswift.StringResource(key: "premium.subscription.detail.normal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: %@ years old
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let changeOldTitle = Rswift.StringResource(key: "change.old.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: 3 days free trial, then %@ / Year
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let premiumTryTitleDes = Rswift.StringResource(key: "premium.try.title.des", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: 3D Free Trials
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let premiumFree3dTrial = Rswift.StringResource(key: "premium.free.3d.trial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: After the free trial, %@ subscription is %@, it automatically renews unless turned off in Accounting Settings at least 24h before current period ends. Payment is charged to your iTunes Account, cancel any time.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let premiumSubscriptionDetailFree = Rswift.StringResource(key: "premium.subscription.detail.free", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Already have an account?
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginHaveAccount = Rswift.StringResource(key: "among.chat.login.have.account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Apr
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let monthApr = Rswift.StringResource(key: "month.apr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Are you sure to  unblock this person
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileUnblockMessage = Rswift.StringResource(key: "profile.unblock.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Are you sure to block  this person
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileBlockMessage = Rswift.StringResource(key: "profile.block.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Are you sure to exit the channel?
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLeaveRoomTipTitle = Rswift.StringResource(key: "among.chat.leave.room.tip.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Asia
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongusServerNorthAsia = Rswift.StringResource(key: "amongus.server.north.asia", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Aug
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let monthAug = Rswift.StringResource(key: "month.aug", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Birthday
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileBirthday = Rswift.StringResource(key: "profile.birthday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Block
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let alertBlock = Rswift.StringResource(key: "alert.block", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Block list
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileBlockUser = Rswift.StringResource(key: "profile.block.user", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Block list
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let socialBlockedUserTitle = Rswift.StringResource(key: "social.blocked.user.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: By continuing, you agree to our %1$@ and %2$@
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatPrivacyLabel = Rswift.StringResource(key: "among.chat.privacy.label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: COD USERNAME/UID
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomCallOfDutyInputCodePlceholder = Rswift.StringResource(key: "room.call.of.duty.input.code.plceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let toastCancel = Rswift.StringResource(key: "toast.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Channel ID
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let reportRoomId = Rswift.StringResource(key: "report.room.id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Channel closed due to inactivity
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomKickoutSystem = Rswift.StringResource(key: "among.chat.room.kickout.system", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Channel is PRIVATE now. The invited players can join!
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let chatroomMessageSystemChangeToPrivate = Rswift.StringResource(key: "chatroom.message.system.change.to.private", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Channel is PUBLIC now. Everyone can join!
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let chatroomMessageSystemChangeToPublic = Rswift.StringResource(key: "chatroom.message.system.change.to.public", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Chat Language
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let settingChatLanguage = Rswift.StringResource(key: "setting.chat.language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Claim
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatCreateRoomCardClaim = Rswift.StringResource(key: "among.chat.create.room.card.claim", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Click to copy others' COD Username/UID to play together
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomCallOfDutyTitle = Rswift.StringResource(key: "among.chat.room.call.of.duty.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Click to copy others' Fortnite display names to play together
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomFortniteTitle = Rswift.StringResource(key: "among.chat.room.fortnite.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Click to copy others' Free Fire nicknames to play together
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomFreefireTitle = Rswift.StringResource(key: "among.chat.room.freefire.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Click to copy others' MLBB Name/ID to play together
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomMobileLegendsTitle = Rswift.StringResource(key: "among.chat.room.mobile.legends.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Click to copy others' Minecraft gamertags to play together
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomMinecraftTitle = Rswift.StringResource(key: "among.chat.room.minecraft.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Click to copy others' PUBG Player Name/ID to play together
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomPubgMobileTitle = Rswift.StringResource(key: "among.chat.room.pubg.mobile.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Click to copy others' Roblox usernames to play together
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomRebloxTitle = Rswift.StringResource(key: "among.chat.room.reblox.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Community guidelines
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileCommunity = Rswift.StringResource(key: "profile.community", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Content contains sensitive words, please modify
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let contentContainSensitiveWords = Rswift.StringResource(key: "content.contain.sensitive.words", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Continue
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let guideContinue = Rswift.StringResource(key: "guide.continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Copied
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let copied = Rswift.StringResource(key: "copied", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Copy link
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let socialCopyLink = Rswift.StringResource(key: "social.copy.link", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Create
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatCreateRoomCreate = Rswift.StringResource(key: "among.chat.create.room.create", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Create a %1$@ channel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatCreateRoomConfirmBtn = Rswift.StringResource(key: "among.chat.create.room.confirm.btn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Create a Channel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatCreateRoomTitle = Rswift.StringResource(key: "among.chat.create.room.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Dec
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let monthDec = Rswift.StringResource(key: "month.dec", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Didn't receive the code? %1$@
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginCodeNotRecieve = Rswift.StringResource(key: "among.chat.login.code.not.recieve", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Done
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileDone = Rswift.StringResource(key: "profile.done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: ENTER YOUR PRIVATE CODE
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomAmongchatInputCodePlceholder = Rswift.StringResource(key: "room.amongchat.input.code.plceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: ENTER YOUR TOPIC
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatCreateRoomInputPlaceholder = Rswift.StringResource(key: "among.chat.create.room.input.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Enjoy these awesome things! ✔️ Secret channels ✔️ Unlimited talking rights
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let guideFourthTitle = Rswift.StringResource(key: "guide.fourth.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Enter your code
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginCodeInputTitle = Rswift.StringResource(key: "among.chat.login.code.input.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Europe
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongusServerNorthEurope = Rswift.StringResource(key: "amongus.server.north.europe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Exit channel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let socialExitChannel = Rswift.StringResource(key: "social.exit.channel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: FORTNITE USERNAME
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomFortniteInputCodePlceholder = Rswift.StringResource(key: "room.fortnite.input.code.plceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: FREE FIRE NICKNAME
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomFreefireInputCodePlceholder = Rswift.StringResource(key: "room.freefire.input.code.plceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Failed to block this person,  please try again.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let socialBlockFailed = Rswift.StringResource(key: "social.block.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Failed to enter channel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatHomeEnterRoomFailed = Rswift.StringResource(key: "among.chat.home.enter.room.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Failed to follow this person,  please try again.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let socialFollowFailed = Rswift.StringResource(key: "social.follow.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Failed to load video
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRewardVideoLoadFailed = Rswift.StringResource(key: "among.chat.reward.video.load.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Failed to unblock this person,  please try again.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let socialUnblockFailed = Rswift.StringResource(key: "social.unblock.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Failed to unlock avatar
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatUnlockAvatarFailed = Rswift.StringResource(key: "among.chat.unlock.avatar.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Failed to update profile
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatUpdateProfileFailed = Rswift.StringResource(key: "among.chat.update.profile.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Feb
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let monthFeb = Rswift.StringResource(key: "month.feb", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Find friends of the same age
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileBirthdaySubtitle = Rswift.StringResource(key: "profile.birthday.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Follow
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let channelUserListFollow = Rswift.StringResource(key: "channel.user.list.follow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Follow
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileFollow = Rswift.StringResource(key: "profile.follow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Follow your teammates to play together  next time
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let socialFollowTeammates = Rswift.StringResource(key: "social.follow.teammates", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Followers
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileFollower = Rswift.StringResource(key: "profile.follower", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Following
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileFollowing = Rswift.StringResource(key: "profile.following", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Go Settings
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let microphoneNotAllowSetting = Rswift.StringResource(key: "microphone.not.allow.setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Guys we need more people on AmongChat! It's super fun and matches you with like minded gamers. Tap the link to download now: https://amongchat.page.link/chat
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let shareAppContent = Rswift.StringResource(key: "share.app.content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Harassment or repulsive language
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let reportIncorrectHarassment = Rswift.StringResource(key: "report.incorrect.harassment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Hey, we need one more person to join to start our game. Come join us here: %@
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let socialShareUrl = Rswift.StringResource(key: "social.share.url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Host could set up note so everyone could see it when they join
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomJustChatTitle = Rswift.StringResource(key: "among.chat.room.just.chat.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Host's Notes
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomSetupHostNotes = Rswift.StringResource(key: "room.setup.host.notes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Host's notes:
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomHostsNotes = Rswift.StringResource(key: "room.hosts.notes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Hot topics
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatCreateRoomTopicTitle = Rswift.StringResource(key: "among.chat.create.room.topic.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: How old are you?
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatSetBirthDayTitle = Rswift.StringResource(key: "among.chat.set.birth.day.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Incorrect information
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let reportIncorrectInformation = Rswift.StringResource(key: "report.incorrect.information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Insufficient SPACE cards
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatCreateRoomCardInsufficientTitle = Rswift.StringResource(key: "among.chat.create.room.card.insufficient.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Invite
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let socialInvite = Rswift.StringResource(key: "social.invite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Invite friends
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let socialInviteFriends = Rswift.StringResource(key: "social.invite.friends", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Invite your friends to play together
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatHomeFriendsShareTitle = Rswift.StringResource(key: "among.chat.home.friends.share.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Jan
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let monthJan = Rswift.StringResource(key: "month.jan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Join
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let socialJoinAction = Rswift.StringResource(key: "social.join.action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Jul
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let monthJul = Rswift.StringResource(key: "month.jul", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Jun
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let monthJun = Rswift.StringResource(key: "month.jun", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Kick
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomKick = Rswift.StringResource(key: "among.chat.room.kick", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Kick Selected (%@)
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomKickSelected = Rswift.StringResource(key: "among.chat.room.kick.selected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Leave
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomLeave = Rswift.StringResource(key: "room.leave", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Log out
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let logOut = Rswift.StringResource(key: "log.out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Login Cancelled
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginSignInCancelled = Rswift.StringResource(key: "among.chat.login.sign.in.cancelled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: MIC ON
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomTipMicOn = Rswift.StringResource(key: "among.chat.room.tip.mic.on", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: MINECRAFT GAMERTAG
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomMinecraftInputCodePlceholder = Rswift.StringResource(key: "room.minecraft.input.code.plceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: MLBB NAME/ID
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomMobileLegendsInputCodePlceholder = Rswift.StringResource(key: "room.mobile.legends.input.code.plceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Make your #amongchat video on TikTok
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileShareTiktokTitle = Rswift.StringResource(key: "profile.share.tiktok.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Mar
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let monthMar = Rswift.StringResource(key: "month.mar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: May
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let monthMay = Rswift.StringResource(key: "month.may", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: More options
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginMore = Rswift.StringResource(key: "among.chat.login.more", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Mute
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let channelUserListMute = Rswift.StringResource(key: "channel.user.list.mute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Muted
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomUserListMuted = Rswift.StringResource(key: "room.user.list.muted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: NICKNAME
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileBagNickname = Rswift.StringResource(key: "profile.bag.nickname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Next
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginNext = Rswift.StringResource(key: "among.chat.login.next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Nickname
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileNickname = Rswift.StringResource(key: "profile.nickname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Nickname or ID
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let searchPlaceholder = Rswift.StringResource(key: "search.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: No purchases were found on your account
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let settingsRestoreFailBody = Rswift.StringResource(key: "settings.restore.fail.body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: North America
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongusServerNorthAmerica = Rswift.StringResource(key: "amongus.server.north.america", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Nov
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let monthNov = Rswift.StringResource(key: "month.nov", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let toastConfirm = Rswift.StringResource(key: "toast.confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Oct
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let monthOct = Rswift.StringResource(key: "month.oct", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Ok
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let alertOk = Rswift.StringResource(key: "alert.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Online
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let socialStatusOnline = Rswift.StringResource(key: "social.status.online", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Only the channel owner can change this
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomUserChangeNotesTitle = Rswift.StringResource(key: "among.chat.room.user.change.notes.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Only this channel host can set the code
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomSetupAmongusSubtitle = Rswift.StringResource(key: "room.setup.amongus.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Only this channel host can set the code
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomSetupInGameCodeSubtitle = Rswift.StringResource(key: "room.setup.in.game.code.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Oops! Wrong code
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginCodeWrong = Rswift.StringResource(key: "among.chat.login.code.wrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Oops, no Internet!
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatHomeLoadErrorTitle = Rswift.StringResource(key: "among.chat.home.load.error.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Oops, no followers yet!
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let errorNoFollowers = Rswift.StringResource(key: "error.no.followers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Oops, no matching results!
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let errorNoSearch = Rswift.StringResource(key: "error.no.search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Oops, no teammates yet!
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let errorNoTeammates = Rswift.StringResource(key: "error.no.teammates", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Open Game
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomTagOpenGame = Rswift.StringResource(key: "room.tag.open.game", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: PRO
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profilePro = Rswift.StringResource(key: "profile.pro", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: PUBG PLAYER NAME/ID
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomPubgMobileInputCodePlceholder = Rswift.StringResource(key: "room.pubg.mobile.input.code.plceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Pay once, No Subscription
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let premiumSubscriptionDetailLifetime = Rswift.StringResource(key: "premium.subscription.detail.lifetime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: People you may like to play with
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatHomeFriendsSuggestionTitle = Rswift.StringResource(key: "among.chat.home.friends.suggestion.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: People you may like to play with
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let socialInvitePlayWith = Rswift.StringResource(key: "social.invite.play.with", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Play Now
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatHomeTeamUp = Rswift.StringResource(key: "among.chat.home.team.up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Please check your connection and try again
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatHomeLoadErrorMsg = Rswift.StringResource(key: "among.chat.home.load.error.msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Please sign in/sign up first to %1$@
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginAuthTip = Rswift.StringResource(key: "among.chat.login.auth.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Please update to the newest version of the app to continue playing.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let forceUpgradeTip = Rswift.StringResource(key: "force.upgrade.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Privacy
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatSettingPrivacy = Rswift.StringResource(key: "among.chat.setting.privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Privacy Policy
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatPrivacyPolicy = Rswift.StringResource(key: "among.chat.privacy.policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Private
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatCreateRoomPrivate = Rswift.StringResource(key: "among.chat.create.room.private", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Private
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomPrivate = Rswift.StringResource(key: "room.private", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Profile
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileProfile = Rswift.StringResource(key: "profile.profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Public
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomPublic = Rswift.StringResource(key: "room.public", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Purchase not found
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let settingsRestoreFailTitle = Rswift.StringResource(key: "settings.restore.fail.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Push Setting
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let pushSetting = Rswift.StringResource(key: "push.setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: ROBLOX USERNAME
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomRobloxInputCodePlceholder = Rswift.StringResource(key: "room.roblox.input.code.plceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Rate us
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let rateUs = Rswift.StringResource(key: "rate.us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Remaining SPACE cards:
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatCreateRoomCardTipTitle = Rswift.StringResource(key: "among.chat.create.room.card.tip.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Report
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let reportTitle = Rswift.StringResource(key: "report.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Resend
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginCodeResend = Rswift.StringResource(key: "among.chat.login.code.resend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Restore
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let settingsRestoreTitle = Rswift.StringResource(key: "settings.restore.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: SMS
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let socialSms = Rswift.StringResource(key: "social.sms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Save
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileEditSaveBtn = Rswift.StringResource(key: "profile.edit.save.btn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Say something...
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomMessagePlaceholder = Rswift.StringResource(key: "among.chat.room.message.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Sep
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let monthSep = Rswift.StringResource(key: "month.sep", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Set COD Username/UID
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomSetCallOfDutyName = Rswift.StringResource(key: "among.chat.room.set.call.of.duty.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Set Fortnite Display Name
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomSetFortniteName = Rswift.StringResource(key: "among.chat.room.set.fortnite.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Set Free Fire Nickname
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomSetFreefireName = Rswift.StringResource(key: "among.chat.room.set.freefire.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Set MLBB Name/ID
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomSetMobileLegendsName = Rswift.StringResource(key: "among.chat.room.set.mobile.legends.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Set Minecraft Gamertag
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomSetMinecraftName = Rswift.StringResource(key: "among.chat.room.set.minecraft.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Set PUBG Player Name/ID
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomSetPubgMobileName = Rswift.StringResource(key: "among.chat.room.set.pubg.mobile.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Set Roblox Username
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomSetRebloxName = Rswift.StringResource(key: "among.chat.room.set.reblox.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Set up in-game code here
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomSetupInGameCodeTitle = Rswift.StringResource(key: "room.setup.in.game.code.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileSettings = Rswift.StringResource(key: "profile.settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let settingsTitle = Rswift.StringResource(key: "settings.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Sexual content
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let reportIncorrectSexual = Rswift.StringResource(key: "report.incorrect.sexual", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Share App
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let shareApp = Rswift.StringResource(key: "share.app", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Sign in
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginSignIn = Rswift.StringResource(key: "among.chat.login.sign.in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Sign in with Apple
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginSignInWithApple = Rswift.StringResource(key: "among.chat.login.sign.in.with.apple", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Sign in with Facebook
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginSignInWithFacebook = Rswift.StringResource(key: "among.chat.login.sign.in.with.facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Sign in with Google
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginSignInWithGoogle = Rswift.StringResource(key: "among.chat.login.sign.in.with.google", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Sign in with Snapchat
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginSignInWithSnapchat = Rswift.StringResource(key: "among.chat.login.sign.in.with.snapchat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Sign in/Sign up
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatProfileSignIn = Rswift.StringResource(key: "among.chat.profile.sign.in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Skip
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileBirthdaySkip = Rswift.StringResource(key: "profile.birthday.skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Something went wrong, please try again.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatCommonError = Rswift.StringResource(key: "among.chat.common.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Start
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginStart = Rswift.StringResource(key: "among.chat.login.start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Subscribe
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let guideSubscribeTitle = Rswift.StringResource(key: "guide.subscribe.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Subscription Terms:
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let premiumSubscriptionTerms = Rswift.StringResource(key: "premium.subscription.terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: TRY IT FREE
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let premiumFreeTrial = Rswift.StringResource(key: "premium.free.trial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Terms
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatSettingTerms = Rswift.StringResource(key: "among.chat.setting.terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Terms of Service
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatTermsService = Rswift.StringResource(key: "among.chat.terms.service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: This channel is private
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatHomeFirendsPrivateChannelTip = Rswift.StringResource(key: "among.chat.home.firends.private.channel.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: This person has been  unblocked
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileUnblockUserSuccess = Rswift.StringResource(key: "profile.unblock.user.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Time remaining %1$@
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginCodeInputTiming = Rswift.StringResource(key: "among.chat.login.code.input.timing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: To join the channel, please switch on microphone permission.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let microphoneNotAllowSubtitle = Rswift.StringResource(key: "microphone.not.allow.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Try again
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatTryAgain = Rswift.StringResource(key: "among.chat.try.again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Try it FREE
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let premiumTryTitle = Rswift.StringResource(key: "premium.try.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Unblock
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let alertUnblock = Rswift.StringResource(key: "alert.unblock", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Unblock
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileUnblock = Rswift.StringResource(key: "profile.Unblock", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Unknown Error
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatUnknownError = Rswift.StringResource(key: "among.chat.unknown.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Unlock PRO
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileUnlockPro = Rswift.StringResource(key: "profile.unlock.pro", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Unmute
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let channelUserListUnmute = Rswift.StringResource(key: "channel.user.list.unmute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Unreasonable demands
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let reportIncorrectUnreasonable = Rswift.StringResource(key: "report.incorrect.unreasonable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Use a SPACE card to create a channel. One free card per day, free cards do not stack.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatCreateRoomCardTipContent = Rswift.StringResource(key: "among.chat.create.room.card.tip.content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Use a SPACE card?
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatCreateRoomCardConsumeContent = Rswift.StringResource(key: "among.chat.create.room.card.consume.content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Watch a short video to get one.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatCreateRoomCardInsufficientContent = Rswift.StringResource(key: "among.chat.create.room.card.insufficient.content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: We sent a code to %1$@ %2$@
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginCodeInputTip = Rswift.StringResource(key: "among.chat.login.code.input.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: We'll send you an SMS verification code.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginSmsTip = Rswift.StringResource(key: "among.chat.login.sms.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Welcome to %@ channel. Any pornography or other inappropriate content is strictly prohibited. Channels are monitored 24/7 and users found with such content may be banned.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatWelcomeMessage = Rswift.StringResource(key: "among.chat.welcome.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: What’s your phone number?
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginMobileTitle = Rswift.StringResource(key: "among.chat.login.mobile.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: You already have an account linked to this method. To continue, your current data would be overwritten and lost.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatProfileOverrite = Rswift.StringResource(key: "among.chat.profile.overrite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: You have successfully  blocked this person
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileBlockUserSuccess = Rswift.StringResource(key: "profile.block.user.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: You have successfully followed  this person
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let socialFollowedSucess = Rswift.StringResource(key: "social.followed.sucess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: You have successfully reported  this person
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let reportSuccess = Rswift.StringResource(key: "report.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: You haven't blocked others yet.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let errorNoBlocker = Rswift.StringResource(key: "error.no.blocker", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: You haven't followed others yet.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let errorNoFollowing = Rswift.StringResource(key: "error.no.following", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: Your online friends
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatHomeFriendsOnlineTitle = Rswift.StringResource(key: "among.chat.home.friends.online.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: You’re all set
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let settingsRestoreSuccessTitle = Rswift.StringResource(key: "settings.restore.success.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: You’ve been removed from this channel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatRoomKickout = Rswift.StringResource(key: "among.chat.room.kickout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: click to copy the code
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomSetupAmongusTitle = Rswift.StringResource(key: "room.setup.amongus.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: create a channel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginAuthSourceChannel = Rswift.StringResource(key: "among.chat.login.auth.source.channel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: edit your profile
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginAuthSourceProfile = Rswift.StringResource(key: "among.chat.login.auth.source.profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: followers
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileLittleFollower = Rswift.StringResource(key: "profile.little.follower", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: following
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let profileLittleFollowing = Rswift.StringResource(key: "profile.little.following", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: host could setup notes so everyone could see it when they join the channel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let roomSetupHostNotesSubtitle = Rswift.StringResource(key: "room.setup.host.notes.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: ignore
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatIgnore = Rswift.StringResource(key: "among.chat.ignore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: in %1$@ channel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatHomeFriendsInChannel = Rswift.StringResource(key: "among.chat.home.friends.in.channel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: is inviting you to their %1$@ channel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatChannelInvitationMsg = Rswift.StringResource(key: "among.chat.channel.invitation.msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: joined
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let chatroomMessageUserJoined = Rswift.StringResource(key: "chatroom.message.user.joined", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: lifetime
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let premiumLifetime = Rswift.StringResource(key: "premium.lifetime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: save your data
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let amongChatLoginAuthSourcePro = Rswift.StringResource(key: "among.chat.login.auth.source.pro", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: sent
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let socialInvited = Rswift.StringResource(key: "social.invited", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: your purchase was successful
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let settingsRestoreSuccessBody = Rswift.StringResource(key: "settings.restore.success.body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      /// en translation: “AmongChat” would like to Access the Microphone
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static let microphoneNotAllowTitle = Rswift.StringResource(key: "microphone.not.allow.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "de", "es", "fr", "it", "ko", "pt-BR", "ru"], comment: nil)
      
      /// en translation:  Congratulations!
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginCongrat(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.congrat", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: %1$@ online
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatHomeNowplaying(_ value1: String) -> String {
        return String(format: NSLocalizedString("among.chat.home.nowplaying", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@ subscription is %@, it automatically renews unless turned off in Accounting Settings at least 24h before current period ends. Payment is charged to your iTunes Account, cancel any time.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func premiumSubscriptionDetailNormal(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("premium.subscription.detail.normal", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: %@ years old
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func changeOldTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("change.old.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: 3 days free trial, then %@ / Year
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func premiumTryTitleDes(_ value1: String) -> String {
        return String(format: NSLocalizedString("premium.try.title.des", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: 3D Free Trials
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func premiumFree3dTrial(_: Void = ()) -> String {
        return NSLocalizedString("premium.free.3d.trial", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: After the free trial, %@ subscription is %@, it automatically renews unless turned off in Accounting Settings at least 24h before current period ends. Payment is charged to your iTunes Account, cancel any time.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func premiumSubscriptionDetailFree(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("premium.subscription.detail.free", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: Already have an account?
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginHaveAccount(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.have.account", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Apr
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func monthApr(_: Void = ()) -> String {
        return NSLocalizedString("month.apr", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are you sure to  unblock this person
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileUnblockMessage(_: Void = ()) -> String {
        return NSLocalizedString("profile.unblock.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are you sure to block  this person
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileBlockMessage(_: Void = ()) -> String {
        return NSLocalizedString("profile.block.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are you sure to exit the channel?
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLeaveRoomTipTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.leave.room.tip.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Asia
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongusServerNorthAsia(_: Void = ()) -> String {
        return NSLocalizedString("amongus.server.north.asia", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Aug
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func monthAug(_: Void = ()) -> String {
        return NSLocalizedString("month.aug", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Birthday
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileBirthday(_: Void = ()) -> String {
        return NSLocalizedString("profile.birthday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Block
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func alertBlock(_: Void = ()) -> String {
        return NSLocalizedString("alert.block", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Block list
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileBlockUser(_: Void = ()) -> String {
        return NSLocalizedString("profile.block.user", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Block list
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func socialBlockedUserTitle(_: Void = ()) -> String {
        return NSLocalizedString("social.blocked.user.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: By continuing, you agree to our %1$@ and %2$@
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatPrivacyLabel(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("among.chat.privacy.label", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: COD USERNAME/UID
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomCallOfDutyInputCodePlceholder(_: Void = ()) -> String {
        return NSLocalizedString("room.call.of.duty.input.code.plceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func toastCancel(_: Void = ()) -> String {
        return NSLocalizedString("toast.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Channel ID
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func reportRoomId(_: Void = ()) -> String {
        return NSLocalizedString("report.room.id", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Channel closed due to inactivity
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomKickoutSystem(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.kickout.system", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Channel is PRIVATE now. The invited players can join!
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func chatroomMessageSystemChangeToPrivate(_: Void = ()) -> String {
        return NSLocalizedString("chatroom.message.system.change.to.private", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Channel is PUBLIC now. Everyone can join!
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func chatroomMessageSystemChangeToPublic(_: Void = ()) -> String {
        return NSLocalizedString("chatroom.message.system.change.to.public", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Chat Language
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func settingChatLanguage(_: Void = ()) -> String {
        return NSLocalizedString("setting.chat.language", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Claim
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatCreateRoomCardClaim(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.create.room.card.claim", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Click to copy others' COD Username/UID to play together
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomCallOfDutyTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.call.of.duty.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Click to copy others' Fortnite display names to play together
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomFortniteTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.fortnite.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Click to copy others' Free Fire nicknames to play together
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomFreefireTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.freefire.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Click to copy others' MLBB Name/ID to play together
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomMobileLegendsTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.mobile.legends.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Click to copy others' Minecraft gamertags to play together
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomMinecraftTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.minecraft.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Click to copy others' PUBG Player Name/ID to play together
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomPubgMobileTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.pubg.mobile.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Click to copy others' Roblox usernames to play together
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomRebloxTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.reblox.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Community guidelines
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileCommunity(_: Void = ()) -> String {
        return NSLocalizedString("profile.community", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Content contains sensitive words, please modify
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func contentContainSensitiveWords(_: Void = ()) -> String {
        return NSLocalizedString("content.contain.sensitive.words", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Continue
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func guideContinue(_: Void = ()) -> String {
        return NSLocalizedString("guide.continue", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copied
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func copied(_: Void = ()) -> String {
        return NSLocalizedString("copied", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy link
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func socialCopyLink(_: Void = ()) -> String {
        return NSLocalizedString("social.copy.link", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatCreateRoomCreate(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.create.room.create", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create a %1$@ channel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatCreateRoomConfirmBtn(_ value1: String) -> String {
        return String(format: NSLocalizedString("among.chat.create.room.confirm.btn", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Create a Channel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatCreateRoomTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.create.room.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dec
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func monthDec(_: Void = ()) -> String {
        return NSLocalizedString("month.dec", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Didn't receive the code? %1$@
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginCodeNotRecieve(_ value1: String) -> String {
        return String(format: NSLocalizedString("among.chat.login.code.not.recieve", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Done
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileDone(_: Void = ()) -> String {
        return NSLocalizedString("profile.done", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ENTER YOUR PRIVATE CODE
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomAmongchatInputCodePlceholder(_: Void = ()) -> String {
        return NSLocalizedString("room.amongchat.input.code.plceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ENTER YOUR TOPIC
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatCreateRoomInputPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.create.room.input.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enjoy these awesome things! ✔️ Secret channels ✔️ Unlimited talking rights
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func guideFourthTitle(_: Void = ()) -> String {
        return NSLocalizedString("guide.fourth.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter your code
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginCodeInputTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.code.input.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Europe
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongusServerNorthEurope(_: Void = ()) -> String {
        return NSLocalizedString("amongus.server.north.europe", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Exit channel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func socialExitChannel(_: Void = ()) -> String {
        return NSLocalizedString("social.exit.channel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: FORTNITE USERNAME
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomFortniteInputCodePlceholder(_: Void = ()) -> String {
        return NSLocalizedString("room.fortnite.input.code.plceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: FREE FIRE NICKNAME
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomFreefireInputCodePlceholder(_: Void = ()) -> String {
        return NSLocalizedString("room.freefire.input.code.plceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed to block this person,  please try again.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func socialBlockFailed(_: Void = ()) -> String {
        return NSLocalizedString("social.block.failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed to enter channel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatHomeEnterRoomFailed(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.home.enter.room.failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed to follow this person,  please try again.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func socialFollowFailed(_: Void = ()) -> String {
        return NSLocalizedString("social.follow.failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed to load video
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRewardVideoLoadFailed(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.reward.video.load.failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed to unblock this person,  please try again.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func socialUnblockFailed(_: Void = ()) -> String {
        return NSLocalizedString("social.unblock.failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed to unlock avatar
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatUnlockAvatarFailed(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.unlock.avatar.failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed to update profile
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatUpdateProfileFailed(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.update.profile.failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Feb
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func monthFeb(_: Void = ()) -> String {
        return NSLocalizedString("month.feb", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Find friends of the same age
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileBirthdaySubtitle(_: Void = ()) -> String {
        return NSLocalizedString("profile.birthday.subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Follow
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func channelUserListFollow(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.list.follow", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Follow
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileFollow(_: Void = ()) -> String {
        return NSLocalizedString("profile.follow", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Follow your teammates to play together  next time
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func socialFollowTeammates(_: Void = ()) -> String {
        return NSLocalizedString("social.follow.teammates", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Followers
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileFollower(_: Void = ()) -> String {
        return NSLocalizedString("profile.follower", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Following
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileFollowing(_: Void = ()) -> String {
        return NSLocalizedString("profile.following", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Go Settings
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func microphoneNotAllowSetting(_: Void = ()) -> String {
        return NSLocalizedString("microphone.not.allow.setting", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Guys we need more people on AmongChat! It's super fun and matches you with like minded gamers. Tap the link to download now: https://amongchat.page.link/chat
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func shareAppContent(_: Void = ()) -> String {
        return NSLocalizedString("share.app.content", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Harassment or repulsive language
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func reportIncorrectHarassment(_: Void = ()) -> String {
        return NSLocalizedString("report.incorrect.harassment", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Hey, we need one more person to join to start our game. Come join us here: %@
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func socialShareUrl(_ value1: String) -> String {
        return String(format: NSLocalizedString("social.share.url", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Host could set up note so everyone could see it when they join
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomJustChatTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.just.chat.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Host's Notes
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomSetupHostNotes(_: Void = ()) -> String {
        return NSLocalizedString("room.setup.host.notes", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Host's notes:
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomHostsNotes(_: Void = ()) -> String {
        return NSLocalizedString("room.hosts.notes", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Hot topics
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatCreateRoomTopicTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.create.room.topic.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: How old are you?
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatSetBirthDayTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.set.birth.day.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Incorrect information
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func reportIncorrectInformation(_: Void = ()) -> String {
        return NSLocalizedString("report.incorrect.information", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient SPACE cards
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatCreateRoomCardInsufficientTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.create.room.card.insufficient.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invite
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func socialInvite(_: Void = ()) -> String {
        return NSLocalizedString("social.invite", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invite friends
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func socialInviteFriends(_: Void = ()) -> String {
        return NSLocalizedString("social.invite.friends", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invite your friends to play together
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatHomeFriendsShareTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.home.friends.share.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Jan
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func monthJan(_: Void = ()) -> String {
        return NSLocalizedString("month.jan", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Join
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func socialJoinAction(_: Void = ()) -> String {
        return NSLocalizedString("social.join.action", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Jul
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func monthJul(_: Void = ()) -> String {
        return NSLocalizedString("month.jul", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Jun
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func monthJun(_: Void = ()) -> String {
        return NSLocalizedString("month.jun", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Kick
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomKick(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.kick", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Kick Selected (%@)
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomKickSelected(_ value1: String) -> String {
        return String(format: NSLocalizedString("among.chat.room.kick.selected", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Leave
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomLeave(_: Void = ()) -> String {
        return NSLocalizedString("room.leave", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Log out
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func logOut(_: Void = ()) -> String {
        return NSLocalizedString("log.out", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login Cancelled
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginSignInCancelled(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.sign.in.cancelled", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MIC ON
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomTipMicOn(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.tip.mic.on", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MINECRAFT GAMERTAG
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomMinecraftInputCodePlceholder(_: Void = ()) -> String {
        return NSLocalizedString("room.minecraft.input.code.plceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MLBB NAME/ID
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomMobileLegendsInputCodePlceholder(_: Void = ()) -> String {
        return NSLocalizedString("room.mobile.legends.input.code.plceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Make your #amongchat video on TikTok
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileShareTiktokTitle(_: Void = ()) -> String {
        return NSLocalizedString("profile.share.tiktok.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mar
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func monthMar(_: Void = ()) -> String {
        return NSLocalizedString("month.mar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: May
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func monthMay(_: Void = ()) -> String {
        return NSLocalizedString("month.may", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: More options
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginMore(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.more", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mute
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func channelUserListMute(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.list.mute", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Muted
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomUserListMuted(_: Void = ()) -> String {
        return NSLocalizedString("room.user.list.muted", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: NICKNAME
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileBagNickname(_: Void = ()) -> String {
        return NSLocalizedString("profile.bag.nickname", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Next
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginNext(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.next", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Nickname
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileNickname(_: Void = ()) -> String {
        return NSLocalizedString("profile.nickname", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Nickname or ID
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func searchPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("search.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No purchases were found on your account
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func settingsRestoreFailBody(_: Void = ()) -> String {
        return NSLocalizedString("settings.restore.fail.body", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: North America
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongusServerNorthAmerica(_: Void = ()) -> String {
        return NSLocalizedString("amongus.server.north.america", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Nov
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func monthNov(_: Void = ()) -> String {
        return NSLocalizedString("month.nov", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func toastConfirm(_: Void = ()) -> String {
        return NSLocalizedString("toast.confirm", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Oct
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func monthOct(_: Void = ()) -> String {
        return NSLocalizedString("month.oct", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ok
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func alertOk(_: Void = ()) -> String {
        return NSLocalizedString("alert.ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Online
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func socialStatusOnline(_: Void = ()) -> String {
        return NSLocalizedString("social.status.online", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Only the channel owner can change this
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomUserChangeNotesTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.user.change.notes.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Only this channel host can set the code
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomSetupAmongusSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("room.setup.amongus.subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Only this channel host can set the code
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomSetupInGameCodeSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("room.setup.in.game.code.subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Oops! Wrong code
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginCodeWrong(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.code.wrong", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Oops, no Internet!
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatHomeLoadErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.home.load.error.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Oops, no followers yet!
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func errorNoFollowers(_: Void = ()) -> String {
        return NSLocalizedString("error.no.followers", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Oops, no matching results!
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func errorNoSearch(_: Void = ()) -> String {
        return NSLocalizedString("error.no.search", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Oops, no teammates yet!
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func errorNoTeammates(_: Void = ()) -> String {
        return NSLocalizedString("error.no.teammates", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Open Game
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomTagOpenGame(_: Void = ()) -> String {
        return NSLocalizedString("room.tag.open.game", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PRO
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profilePro(_: Void = ()) -> String {
        return NSLocalizedString("profile.pro", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PUBG PLAYER NAME/ID
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomPubgMobileInputCodePlceholder(_: Void = ()) -> String {
        return NSLocalizedString("room.pubg.mobile.input.code.plceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pay once, No Subscription
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func premiumSubscriptionDetailLifetime(_: Void = ()) -> String {
        return NSLocalizedString("premium.subscription.detail.lifetime", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: People you may like to play with
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatHomeFriendsSuggestionTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.home.friends.suggestion.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: People you may like to play with
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func socialInvitePlayWith(_: Void = ()) -> String {
        return NSLocalizedString("social.invite.play.with", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Play Now
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatHomeTeamUp(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.home.team.up", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please check your connection and try again
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatHomeLoadErrorMsg(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.home.load.error.msg", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please sign in/sign up first to %1$@
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginAuthTip(_ value1: String) -> String {
        return String(format: NSLocalizedString("among.chat.login.auth.tip", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Please update to the newest version of the app to continue playing.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func forceUpgradeTip(_: Void = ()) -> String {
        return NSLocalizedString("force.upgrade.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Privacy
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatSettingPrivacy(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.setting.privacy", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Privacy Policy
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatPrivacyPolicy(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.privacy.policy", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Private
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatCreateRoomPrivate(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.create.room.private", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Private
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomPrivate(_: Void = ()) -> String {
        return NSLocalizedString("room.private", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Profile
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileProfile(_: Void = ()) -> String {
        return NSLocalizedString("profile.profile", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Public
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomPublic(_: Void = ()) -> String {
        return NSLocalizedString("room.public", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Purchase not found
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func settingsRestoreFailTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.restore.fail.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Push Setting
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func pushSetting(_: Void = ()) -> String {
        return NSLocalizedString("push.setting", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ROBLOX USERNAME
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomRobloxInputCodePlceholder(_: Void = ()) -> String {
        return NSLocalizedString("room.roblox.input.code.plceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Rate us
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func rateUs(_: Void = ()) -> String {
        return NSLocalizedString("rate.us", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Remaining SPACE cards:
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatCreateRoomCardTipTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.create.room.card.tip.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Report
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func reportTitle(_: Void = ()) -> String {
        return NSLocalizedString("report.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Resend
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginCodeResend(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.code.resend", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Restore
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func settingsRestoreTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.restore.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SMS
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func socialSms(_: Void = ()) -> String {
        return NSLocalizedString("social.sms", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Save
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileEditSaveBtn(_: Void = ()) -> String {
        return NSLocalizedString("profile.edit.save.btn", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Say something...
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomMessagePlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.message.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sep
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func monthSep(_: Void = ()) -> String {
        return NSLocalizedString("month.sep", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Set COD Username/UID
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomSetCallOfDutyName(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.set.call.of.duty.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Set Fortnite Display Name
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomSetFortniteName(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.set.fortnite.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Set Free Fire Nickname
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomSetFreefireName(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.set.freefire.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Set MLBB Name/ID
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomSetMobileLegendsName(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.set.mobile.legends.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Set Minecraft Gamertag
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomSetMinecraftName(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.set.minecraft.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Set PUBG Player Name/ID
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomSetPubgMobileName(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.set.pubg.mobile.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Set Roblox Username
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomSetRebloxName(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.set.reblox.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Set up in-game code here
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomSetupInGameCodeTitle(_: Void = ()) -> String {
        return NSLocalizedString("room.setup.in.game.code.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileSettings(_: Void = ()) -> String {
        return NSLocalizedString("profile.settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func settingsTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sexual content
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func reportIncorrectSexual(_: Void = ()) -> String {
        return NSLocalizedString("report.incorrect.sexual", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Share App
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func shareApp(_: Void = ()) -> String {
        return NSLocalizedString("share.app", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign in
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginSignIn(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.sign.in", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign in with Apple
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginSignInWithApple(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.sign.in.with.apple", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign in with Facebook
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginSignInWithFacebook(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.sign.in.with.facebook", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign in with Google
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginSignInWithGoogle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.sign.in.with.google", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign in with Snapchat
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginSignInWithSnapchat(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.sign.in.with.snapchat", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign in/Sign up
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatProfileSignIn(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.profile.sign.in", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Skip
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileBirthdaySkip(_: Void = ()) -> String {
        return NSLocalizedString("profile.birthday.skip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Something went wrong, please try again.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatCommonError(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.common.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Start
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginStart(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.start", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Subscribe
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func guideSubscribeTitle(_: Void = ()) -> String {
        return NSLocalizedString("guide.subscribe.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Subscription Terms:
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func premiumSubscriptionTerms(_: Void = ()) -> String {
        return NSLocalizedString("premium.subscription.terms", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: TRY IT FREE
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func premiumFreeTrial(_: Void = ()) -> String {
        return NSLocalizedString("premium.free.trial", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Terms
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatSettingTerms(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.setting.terms", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Terms of Service
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatTermsService(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.terms.service", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This channel is private
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatHomeFirendsPrivateChannelTip(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.home.firends.private.channel.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This person has been  unblocked
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileUnblockUserSuccess(_: Void = ()) -> String {
        return NSLocalizedString("profile.unblock.user.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Time remaining %1$@
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginCodeInputTiming(_ value1: String) -> String {
        return String(format: NSLocalizedString("among.chat.login.code.input.timing", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: To join the channel, please switch on microphone permission.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func microphoneNotAllowSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("microphone.not.allow.subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Try again
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatTryAgain(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.try.again", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Try it FREE
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func premiumTryTitle(_: Void = ()) -> String {
        return NSLocalizedString("premium.try.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unblock
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func alertUnblock(_: Void = ()) -> String {
        return NSLocalizedString("alert.unblock", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unblock
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileUnblock(_: Void = ()) -> String {
        return NSLocalizedString("profile.Unblock", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unknown Error
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatUnknownError(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.unknown.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unlock PRO
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileUnlockPro(_: Void = ()) -> String {
        return NSLocalizedString("profile.unlock.pro", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unmute
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func channelUserListUnmute(_: Void = ()) -> String {
        return NSLocalizedString("channel.user.list.unmute", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unreasonable demands
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func reportIncorrectUnreasonable(_: Void = ()) -> String {
        return NSLocalizedString("report.incorrect.unreasonable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Use a SPACE card to create a channel. One free card per day, free cards do not stack.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatCreateRoomCardTipContent(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.create.room.card.tip.content", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Use a SPACE card?
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatCreateRoomCardConsumeContent(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.create.room.card.consume.content", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Watch a short video to get one.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatCreateRoomCardInsufficientContent(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.create.room.card.insufficient.content", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: We sent a code to %1$@ %2$@
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginCodeInputTip(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("among.chat.login.code.input.tip", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: We'll send you an SMS verification code.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginSmsTip(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.sms.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Welcome to %@ channel. Any pornography or other inappropriate content is strictly prohibited. Channels are monitored 24/7 and users found with such content may be banned.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatWelcomeMessage(_ value1: String) -> String {
        return String(format: NSLocalizedString("among.chat.welcome.message", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: What’s your phone number?
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginMobileTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.mobile.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You already have an account linked to this method. To continue, your current data would be overwritten and lost.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatProfileOverrite(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.profile.overrite", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You have successfully  blocked this person
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileBlockUserSuccess(_: Void = ()) -> String {
        return NSLocalizedString("profile.block.user.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You have successfully followed  this person
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func socialFollowedSucess(_: Void = ()) -> String {
        return NSLocalizedString("social.followed.sucess", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You have successfully reported  this person
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func reportSuccess(_: Void = ()) -> String {
        return NSLocalizedString("report.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You haven't blocked others yet.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func errorNoBlocker(_: Void = ()) -> String {
        return NSLocalizedString("error.no.blocker", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You haven't followed others yet.
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func errorNoFollowing(_: Void = ()) -> String {
        return NSLocalizedString("error.no.following", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your online friends
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatHomeFriendsOnlineTitle(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.home.friends.online.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You’re all set
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func settingsRestoreSuccessTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.restore.success.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You’ve been removed from this channel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatRoomKickout(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.room.kickout", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: click to copy the code
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomSetupAmongusTitle(_: Void = ()) -> String {
        return NSLocalizedString("room.setup.amongus.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: create a channel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginAuthSourceChannel(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.auth.source.channel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: edit your profile
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginAuthSourceProfile(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.auth.source.profile", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: followers
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileLittleFollower(_: Void = ()) -> String {
        return NSLocalizedString("profile.little.follower", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: following
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func profileLittleFollowing(_: Void = ()) -> String {
        return NSLocalizedString("profile.little.following", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: host could setup notes so everyone could see it when they join the channel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func roomSetupHostNotesSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("room.setup.host.notes.subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ignore
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatIgnore(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.ignore", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: in %1$@ channel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatHomeFriendsInChannel(_ value1: String) -> String {
        return String(format: NSLocalizedString("among.chat.home.friends.in.channel", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: is inviting you to their %1$@ channel
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatChannelInvitationMsg(_ value1: String) -> String {
        return String(format: NSLocalizedString("among.chat.channel.invitation.msg", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: joined
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func chatroomMessageUserJoined(_: Void = ()) -> String {
        return NSLocalizedString("chatroom.message.user.joined", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: lifetime
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func premiumLifetime(_: Void = ()) -> String {
        return NSLocalizedString("premium.lifetime", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: save your data
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func amongChatLoginAuthSourcePro(_: Void = ()) -> String {
        return NSLocalizedString("among.chat.login.auth.source.pro", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: sent
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func socialInvited(_: Void = ()) -> String {
        return NSLocalizedString("social.invited", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: your purchase was successful
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func settingsRestoreSuccessBody(_: Void = ()) -> String {
        return NSLocalizedString("settings.restore.success.body", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: “AmongChat” would like to Access the Microphone
      /// 
      /// Locales: en, ar, de, es, fr, it, ko, pt-BR, ru
      static func microphoneNotAllowTitle(_: Void = ()) -> String {
        return NSLocalizedString("microphone.not.allow.title", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AmongChatRoomConfigView.validate()
      try _AmongChatRoomTopBar.validate()
      try _AmongRoomBottomBar.validate()
      try _GuideFirstView.validate()
      try _GuideFourthView.validate()
      try _GuideFourthView_b.validate()
      try _GuideSecondView.validate()
      try _GuideThirdView.validate()
      try _PremiumContainer.validate()
      try _ShareContainerView.validate()
      try _SnapChatCreativeShareView.validate()
      try _SocialTiktokItemView.validate()
      try _TikTokShareView.validate()
    }
    
    struct _AmongChatRoomConfigView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AmongChatRoomConfigView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ac_icon_not", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_icon_not' is used in nib 'AmongChatRoomConfigView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _AmongChatRoomTopBar: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AmongChatRoomTopBar"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ac_icon_kick_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_icon_kick_user' is used in nib 'AmongChatRoomTopBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ac_icon_leave", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_icon_leave' is used in nib 'AmongChatRoomTopBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ac_icon_room_report", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_icon_room_report' is used in nib 'AmongChatRoomTopBar', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _AmongInputCodeView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AmongInputCodeView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AmongInputNickNameView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AmongInputNickNameView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AmongInputNotesView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AmongInputNotesView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AmongRoomBottomBar: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AmongRoomBottomBar"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ac_icon_mic_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_icon_mic_on' is used in nib 'AmongRoomBottomBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ac_icon_send_message", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_icon_send_message' is used in nib 'AmongRoomBottomBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ac_icon_share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_icon_share' is used in nib 'AmongRoomBottomBar', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _AmongRoomInfoSetupView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AmongRoomInfoSetupView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AmongRoomInfoView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AmongRoomInfoView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AmongRoomToolView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AmongRoomToolView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AmongSheetController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AmongSheetController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AmongSheetIconItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AmongSheetIconItemCell
      
      let bundle = R.hostingBundle
      let identifier = "AmongSheetIconItemCell"
      let name = "AmongSheetIconItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AmongSheetIconItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AmongSheetIconItemCell
      }
      
      fileprivate init() {}
    }
    
    struct _AmongSheetUserCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AmongSheetUserCell
      
      let bundle = R.hostingBundle
      let identifier = "AmongSheetUserCell"
      let name = "AmongSheetUserCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AmongSheetUserCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AmongSheetUserCell
      }
      
      fileprivate init() {}
    }
    
    struct _EndUserLicenseController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EndUserLicenseController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _GuideFirstView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GuideFirstView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_guide_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guide_1' is used in nib 'GuideFirstView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star_bg' is used in nib 'GuideFirstView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _GuideFourthView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GuideFourthView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_close_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close_gray' is used in nib 'GuideFourthView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_emoji_hh", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_emoji_hh' is used in nib 'GuideFourthView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_emoji_kiss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_emoji_kiss' is used in nib 'GuideFourthView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_guide_4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guide_4' is used in nib 'GuideFourthView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'GuideFourthView', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _GuideFourthView_b: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GuideFourthView_b"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close' is used in nib 'GuideFourthView_b', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_guide_4_b", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guide_4_b' is used in nib 'GuideFourthView_b', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star_bg' is used in nib 'GuideFourthView_b', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _GuideSecondView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GuideSecondView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_guide_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guide_2' is used in nib 'GuideSecondView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _GuideThirdView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GuideThirdView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_guide_3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_guide_3' is used in nib 'GuideThirdView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star_bg' is used in nib 'GuideThirdView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _JustChillingInfoView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "JustChillingInfoView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _PremiumContainer: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PremiumContainer"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close' is used in nib 'PremiumContainer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pro' is used in nib 'PremiumContainer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pro_persons", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pro_persons' is used in nib 'PremiumContainer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pro_select", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pro_select' is used in nib 'PremiumContainer', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'PremiumContainer', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ShareContainerView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ShareContainerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_share_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_share_bg' is used in nib 'ShareContainerView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SnapChatCreativeShareView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SnapChatCreativeShareView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "snapchat_share_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'snapchat_share_bg' is used in nib 'SnapChatCreativeShareView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SocialTiktokItemView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SocialTiktokItemView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ac_right_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_right_arrow' is used in nib 'SocialTiktokItemView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ac_social_tiktok", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_social_tiktok' is used in nib 'SocialTiktokItemView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _TikTokShareView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TikTokShareView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "public_share_bg_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'public_share_bg_2' is used in nib 'TikTokShareView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try guide.validate()
      try launchScreen.validate()
      try main.validate()
    }
    
    struct guide: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let guideViewController = StoryboardViewControllerResource<GuideViewController>(identifier: "GuideViewController")
      let name = "Guide"
      
      func guideViewController(_: Void = ()) -> GuideViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: guideViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.guide().guideViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'guideViewController' could not be loaded from storyboard 'Guide' as 'GuideViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ac_login_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ac_login_bg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "launch_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "launch_name", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch_name' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NavigationViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      let premiumViewController = StoryboardViewControllerResource<PremiumViewController>(identifier: "PremiumViewController")
      
      func premiumViewController(_: Void = ()) -> PremiumViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: premiumViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_close' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pro' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pro_persons", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pro_persons' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_pro_select", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_pro_select' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().premiumViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'premiumViewController' could not be loaded from storyboard 'Main' as 'PremiumViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
